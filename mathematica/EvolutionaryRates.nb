(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    275496,       5162]
NotebookOptionsPosition[    274354,       5124]
NotebookOutlinePosition[    274711,       5140]
CellTagsIndexPosition[    274668,       5137]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MetapopDyn", "[", 
     RowBox[{
     "\[Alpha]_", ",", "\[Lambda]_", ",", "\[Sigma]_", ",", "\[Rho]_", ",", 
      "\[Beta]_", ",", "\[Mu]_", ",", "T_"}], "]"}], " ", ":=", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"F", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
         RowBox[{
          RowBox[{"\[Lambda]", "*", 
           RowBox[{"F", "[", "t", "]"}]}], "-", 
          RowBox[{"\[Sigma]", "*", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
           RowBox[{"F", "[", "t", "]"}]}], " ", "+", 
          RowBox[{"\[Rho]", "*", " ", 
           RowBox[{"R", "[", "t", "]"}], " ", "*", " ", 
           RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"H", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
         RowBox[{
          RowBox[{"\[Sigma]", "*", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
           RowBox[{"F", "[", "t", "]"}]}], " ", "-", " ", 
          RowBox[{"\[Rho]", "*", " ", 
           RowBox[{"R", "[", "t", "]"}], "*", 
           RowBox[{"H", "[", "t", "]"}]}], " ", "-", " ", 
          RowBox[{"\[Mu]", "*", 
           RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
         RowBox[{
          RowBox[{"\[Alpha]", "*", 
           RowBox[{"R", "[", "t", "]"}], "*", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Rho]", "*", 
              RowBox[{"H", "[", "t", "]"}]}], " ", "+", " ", 
             RowBox[{"\[Beta]", "*", 
              RowBox[{"F", "[", "t", "]"}]}]}], ")"}], "*", 
           RowBox[{"R", "[", "t", "]"}]}]}]}], " ", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"F", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
        RowBox[{
         RowBox[{"H", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", "0.16"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"F", ",", "H", ",", "R"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
      RowBox[{"MaxSteps", "\[Rule]", "Infinity"}], ",", 
      RowBox[{"InterpolationOrder", "\[Rule]", "All"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "=", "0.5"}], ",", 
     RowBox[{"\[Lambda]", "=", "0.2"}], ",", 
     RowBox[{"\[Sigma]", "=", "0.9"}], ",", 
     RowBox[{"\[Rho]", "=", "0.1"}], ",", 
     RowBox[{"\[Beta]", "=", "0.2"}], ",", 
     RowBox[{"\[Mu]", "=", "0.3"}], ",", 
     RowBox[{"T", "=", "200"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Traj", "=", 
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", "t", "]"}], ",", 
         RowBox[{"H", "[", "t", "]"}], ",", 
         RowBox[{"F", "[", "t", "]"}]}], "}"}], "/.", 
       RowBox[{"MetapopDyn", "[", 
        RowBox[{
        "\[Alpha]", ",", "\[Lambda]", ",", "\[Sigma]", ",", "\[Rho]", ",", 
         "\[Beta]", ",", "\[Mu]", ",", "T"}], "]"}]}], " ", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{"Traj", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "All"}], "}"}]}], ",", 
      RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
      RowBox[{"Frame", "\[Rule]", "True"}], ",", 
      RowBox[{"FrameLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<Time\>\"", ",", "\"\<Density\>\""}], "}"}]}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<R\>\"", ",", "\"\<H\>\"", ",", "\"\<F\>\""}], "}"}]}]}], 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.675509657566944*^9, 3.6755097035446367`*^9}, {
   3.6755097804869347`*^9, 3.6755100139507713`*^9}, 3.6755154210996637`*^9, {
   3.6755155751596937`*^9, 3.675515588910914*^9}, {3.675517466628036*^9, 
   3.675517475235299*^9}, {3.675517623381781*^9, 3.675517633036009*^9}, {
   3.67551772957957*^9, 3.675517740730639*^9}, {3.675519506532134*^9, 
   3.6755195248981*^9}, {3.675521229737406*^9, 3.6755212437898703`*^9}, {
   3.675524056113874*^9, 3.675524056750807*^9}, {3.6755244713819113`*^9, 
   3.675524471762473*^9}, {3.67553091029525*^9, 3.6755309168284817`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
//4FA1NO0Yb/B2XOJOA=
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1:eJwd2Hc8l10UAHCzzIoiMkJlb9lyD7LXz957ZhRSRpQk6k0lZW9JREYiI7JC
C5GtQhElZVYy3vv0l8/383juc8+595x74XU9ZepBQUZG9oKSjIz4yXdz8242
91vV0tWmik/h7Ug78D6tv3c52s3+1ugixXNkMil6U9D7GbrDdex00/nnaJuq
zYDxRifyLK29KPrzObJM+2Gyw7sHSZ/y8ba06kCDrDdKtnP7EW8Ey1Lz4w5E
4XJYfOP6ELLUUt3xjaYTiZXUV/wOH0MFD7knDc07kfUqSWbV6yN6O0Nh6pDS
iVpzlkdDH0wiEvnlubi+TjTUrsr5K/cTEml1MpLf0YXm5646nEmZRmvBl9R6
pbsQxe6B7OXrXxClyRRdlXUXYjvKMxEYM4dkyYa6lEO7kLiNL+/P8G9o6yOj
XOutLnT8fI3rycDvqJZ7YU/6vS5kc5e8YN7rBzpxec1o7+MuJO9eGCRb/hO5
cMwohTd2odY1/dvBDxYRj0z/vf2tXcjw6mJV1b0ldPSsKoUU9jBHyrul3GUk
1HczmaapC7mVqaxKZa4gZoGdie+ru9ACTLEEpqwi+qAQ5fniLhTaHydXkbiG
BidXqU+mdyFKTzGrH9d/oSjHvQ1pcV3oxu++EPGrv9FxnrqMu4E4nmuhqf4x
fxD3B9/ARhzfXS7uutIL60jsCs191mM4voq2kW/hfxG9aKH7OHcXqlM/sS58
dgPFcW+UKm51ouMDuzh8AjdRPaP9FauxTmS7bmM/67WNzrD2iJ662YmCOi40
3ZYigw+ZVWGVnp2o9mafkUw5GSQMPfxPU6UTqfOFngp6QA5n+qYDJ6c6kLV2
W8XPXEow/0EzRcvbgWJu2ch8v74ThvabTE6faUejR2IVZrx2w73SZ/NLy81o
83DMR9afuyHmw+hn3dpmtIdZre2Qyh5ICPiSuB7RjKSZkI95+x4gsxR8H72z
GYXuVq6tfscE4757Gu9oNCEqBhnz0NW9MH78bF/q+3qUTP/ofoLiPkjv2R77
eKYeCdBL/S2K3Aej998MmOyuR3p0Evkj1CxQwdu83KxZhxJoRH4qsbJCgCR1
6HbzE8RJfSh+U44NGk6+8M9YfIzKqPI/spxjgzMPWZy4sh4jRMUrI/6MDVLD
86Tf6j5GrpQHRx212eFOnftYV2EVKiLnEGy2OgCS34XSXpx8hJTI088NZxwA
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
lPXP/wMoz9YY
        "]]}, {
       Directive[
        Opacity[1.], 
        RGBColor[0.560181, 0.691569, 0.194885], 
        AbsoluteThickness[1.6]], 
       LineBox[CompressedData["
1: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
h12VDIixB+V7ogwT7Iqbvg++HrAH67rnKy2w62YlAyOP2kNgqPJ1K+z7xn0r
ZjLs4VtnxAMb7HAz3RbXs/bgrX3Nwg5bzDL/wK1Ce3hrN2Bnj91qPaclVGIP
p8ake4ij7bwmoqrw+08mDhFLO9673llvD5y3eHcRv6CsDVZ5YA8nV3ceJe+L
c01cl/nUHi7NdsjbYsu5M/u/d9qDF6uwkzV2J804x6bPHi4LXOKyxD7odcWh
nGkPu7bGO5lhb/Zl4+YatQfLoKLNxthv/YMeh0zaQ06m4DlD7KSgtkNts/bA
Yf0yVxdbJXSjjvxyB/j18vlWEr+BsNRfySsd4NjYskAS39SIrzeGhRzAk3P3
VkVsjUjrUCNJB7i2XKRgAzYz+rpskZwDXN03cG0dtm5cxDkvTQeQjL5QKIT9
X/wrp7sGDtDDHXWKBzv7oAqPhLkDUIWlt7BjjyVNJPa6OcCn57m03zh/8o5S
9Lb5OEBqr8LUd2zz1NrfOSEO8Igpqk/yryhjT5hznAPs3BT1oQubkvvX+dV5
B5hB14rKsBfyaKuULjvA+m1pjELs6xfuPE0rdwDebtfBMyTfrxw0sLrjAA7V
54QPYtffYN34eMABsi7+LLPFzmSyzQ/wOcJI1qsRJq7PT/6aNB5hR/gTdfk+
qV/dT0H1emKOYKtxa1cr9n8jbVF56xxh96NceinpD99TR6hbHeHGi6m0cOzJ
aZ7OboojDP59mfkD95Md1A9/G90cgcb9+QID+1N91fpLNEcYW/NfQRf22zhK
7C5/RzBmb91Zi904e06aJ9oRghKnD+7FTlyQjTA75Qh8bBNS/3A/4+PQ4W7o
cIRG62IPNuzUYG6Ni68d4Yeu7PrfuD+yPHnvlfLOEc7v4Z75jD157FCNy5Aj
sNQWPHiC/ZbrsfvEuCNM1KV8S8Mu5HUo2bzKCda77JVcja0oEmR6wdYJDC23
auuT/t3xbbrX0Qla6XxaytgHjkeXCbs6gVO5vtO6k+T/q4RV6V5OUC7zg8GG
HTaS1xu/0wm++A7u7MhkoLL6znD3LCfQ63uSHIbdGUVdm53tBBf5g+O9sf9s
+dDVkesEc+ezTlOwLYu+aVlccoLM0a0KethfUjlYtW46QUbPhe+82Bto+jlC
b5zA6lv4RCO+b+yFH1k49DqB+qO5VdXYe19ZzZ4YwM+7pjsUY7cZU32WfXaC
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
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 0.25, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
        FormBox["\"Density\"", TraditionalForm], None}, {
        FormBox["\"Time\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {{0., 199.99999591836735`}, {0, All}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {0, 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"R\"", "\"H\"", "\"F\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.6755096886312733`*^9, 3.675509704408935*^9}, {
   3.675509859797785*^9, 3.675509864855754*^9}, {3.675509936945095*^9, 
   3.675510014565834*^9}, 3.6755154214728327`*^9, {3.6755155770501432`*^9, 
   3.675515589649016*^9}, {3.6755174677496367`*^9, 3.675517476241559*^9}, {
   3.675517626513936*^9, 3.675517634293302*^9}, {3.6755177298902082`*^9, 
   3.67551774120376*^9}, {3.6755195089690323`*^9, 3.675519525451001*^9}, {
   3.675521236651661*^9, 3.6755212446697598`*^9}, 3.675524057149721*^9, 
   3.6755244726427517`*^9, 3.6755309177053957`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.675510028440631*^9, 3.675510166297419*^9}, 
   3.675510308513927*^9, 3.675510405169496*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.675510209313781*^9, 3.675510225334978*^9}, {
   3.67551027261351*^9, 3.6755103573873253`*^9}, 3.67551041044862*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MetapopDyn", "[", 
     RowBox[{
     "\[Alpha]_", ",", "\[Lambda]_", ",", "\[Rho]_", ",", "\[Beta]_", ",", 
      "\[Mu]_", ",", "T_", ",", "sigmax_", ",", "slope_", ",", "var_", ",", 
      "\[Theta]_", ",", "varG_"}], "]"}], " ", ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"sigma", "=", " ", 
        RowBox[{
         FractionBox[
          RowBox[{"sigmax", "*", "slope"}], 
          SqrtBox[
           RowBox[{"var", "+", 
            RowBox[{"slope", "^", "2"}]}]]], "*", 
         RowBox[{"Exp", "[", 
          FractionBox[
           RowBox[{"-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}], "^",
              "2"}]}], 
           RowBox[{"2", "*", 
            RowBox[{"(", 
             RowBox[{"var", "+", 
              RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Wbar", " ", "=", " ", 
        RowBox[{"\[Lambda]", "+", 
         RowBox[{"sigma", " ", "*", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{"F", "[", "t", "]"}], 
             RowBox[{"H", "[", "t", "]"}]], "-", "1"}], ")"}]}], "+", 
         RowBox[{"\[Rho]", "*", 
          RowBox[{"R", "[", "t", "]"}], "*", 
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{"H", "[", "t", "]"}], 
             RowBox[{"F", "[", "t", "]"}]], "-", 
            RowBox[{"R", "[", "t", "]"}]}], ")"}]}], "-", " ", "\[Mu]"}]}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"F", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{"\[Lambda]", "*", 
            RowBox[{"F", "[", "t", "]"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmax", "*", "slope"}], 
               SqrtBox[
                RowBox[{"var", "+", 
                 RowBox[{"slope", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}],
                   "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"var", "+", 
                   RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
            RowBox[{"F", "[", "t", "]"}]}], " ", "+", 
           RowBox[{"\[Rho]", "*", " ", 
            RowBox[{"R", "[", "t", "]"}], " ", "*", " ", 
            RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"H", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmax", "*", "slope"}], 
               SqrtBox[
                RowBox[{"var", "+", 
                 RowBox[{"slope", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}],
                   "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"var", "+", 
                   RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
            RowBox[{"F", "[", "t", "]"}]}], " ", "-", " ", 
           RowBox[{"\[Rho]", "*", " ", 
            RowBox[{"R", "[", "t", "]"}], "*", 
            RowBox[{"H", "[", "t", "]"}]}], " ", "-", " ", 
           RowBox[{"\[Mu]", "*", 
            RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"R", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{"\[Alpha]", "*", 
            RowBox[{"R", "[", "t", "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Rho]", "*", 
               RowBox[{"H", "[", "t", "]"}]}], " ", "+", " ", 
              RowBox[{"\[Beta]", "*", 
               RowBox[{"F", "[", "t", "]"}]}]}], ")"}], "*", 
            RowBox[{"R", "[", "t", "]"}]}]}]}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"xbar", "'"}], "[", "t", "]"}], " ", "\[Equal]", " ", 
            RowBox[{"varG", "*", 
             RowBox[{"D", "[", " ", 
              RowBox[{
               RowBox[{"\[Lambda]", "+", 
                RowBox[{
                 RowBox[{"(", " ", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"sigmax", "*", "slope"}], 
                    SqrtBox[
                    RowBox[{"var", "+", 
                    RowBox[{"slope", "^", "2"}]}]]], "*", 
                   RowBox[{"Exp", "[", 
                    FractionBox[
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}],
                     "^", "2"}]}], 
                    RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"var", "+", 
                    RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], " ", 
                  ")"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", 
                   RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"F", "[", "t", "]"}], 
                    RowBox[{"H", "[", "t", "]"}]], "-", "1"}], ")"}]}], "+", 
                RowBox[{"\[Rho]", "*", 
                 RowBox[{"R", "[", "t", "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{
                   FractionBox[
                    RowBox[{"H", "[", "t", "]"}], 
                    RowBox[{"F", "[", "t", "]"}]], "-", 
                   RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", " ", 
                "\[Mu]"}], ",", 
               RowBox[{"xbar", "[", "t", "]"}]}], "]"}]}]}], ","}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"xbar", "'"}], "[", "t", "]"}], " ", "\[Equal]", " ", 
          RowBox[{"varG", "*", 
           RowBox[{"D", "[", " ", 
            RowBox[{
             RowBox[{"\[Lambda]", "+", 
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 FractionBox[
                  RowBox[{"sigmax", "*", "slope"}], 
                  SqrtBox[
                   RowBox[{"var", "+", 
                    RowBox[{"slope", "^", "2"}]}]]], "*", 
                 RowBox[{"Exp", "[", 
                  FractionBox[
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}],
                     "^", "2"}]}], 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"var", "+", 
                    RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], " ", 
                ")"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"R", "[", "t", "]"}]}], ")"}]}], "+", 
              RowBox[{"\[Rho]", "*", 
               RowBox[{"R", "[", "t", "]"}], "*", 
               FractionBox[
                RowBox[{"H", "[", "t", "]"}], 
                RowBox[{"F", "[", "t", "]"}]]}]}], " ", ",", 
             RowBox[{"xbar", "[", "t", "]"}]}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"F", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"H", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"R", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"xbar", "[", "0", "]"}], "\[Equal]", "1.6"}]}], "}"}], ",", 
       
       RowBox[{"{", 
        RowBox[{"F", ",", "H", ",", "R", ",", "xbar"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
       RowBox[{"MaxSteps", "\[Rule]", "Infinity"}], ",", 
       RowBox[{"InterpolationOrder", "\[Rule]", "All"}]}], "]"}], ")"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "=", "0.5"}], ",", 
     RowBox[{"\[Lambda]", "=", "0.2"}], ",", 
     RowBox[{"\[Rho]", "=", "0.3"}], ",", 
     RowBox[{"\[Beta]", "=", "0.2"}], ",", 
     RowBox[{"\[Mu]", "=", "0.5"}], ",", 
     RowBox[{"T", "=", "500"}], ",", 
     RowBox[{"sigmax", "=", "0.8"}], ",", 
     RowBox[{"slope", "=", "0.3"}], ",", 
     RowBox[{"var", "=", "0.001"}], ",", 
     RowBox[{"\[Theta]", "=", "1"}], ",", 
     RowBox[{"varG", "=", "0.01"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Traj", "=", 
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", "t", "]"}], ",", 
         RowBox[{"H", "[", "t", "]"}], ",", 
         RowBox[{"F", "[", "t", "]"}], ",", 
         RowBox[{"xbar", "[", "t", "]"}]}], "}"}], "/.", 
       RowBox[{"MetapopDyn", "[", 
        RowBox[{
        "\[Alpha]", ",", "\[Lambda]", ",", "\[Rho]", ",", "\[Beta]", ",", 
         "\[Mu]", ",", "T", ",", "sigmax", ",", "slope", ",", "var", ",", 
         "\[Theta]", ",", "varG"}], "]"}]}], " ", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Legended", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Plot", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Traj", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
               RowBox[{"PlotRange", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "All"}], "}"}]}], ",", 
               RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
               RowBox[{"Frame", "\[Rule]", "True"}], ",", 
               RowBox[{"FrameLabel", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\"\<Time\>\"", ",", "\"\<Density\>\""}], "}"}]}], 
               ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"ColorData", "[", 
                 RowBox[{"97", ",", "i"}], "]"}]}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "400"}]}], "\[IndentingNewLine]", 
          "]"}], ",", 
         RowBox[{"SwatchLegend", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "1"}], "]"}], ",", 
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "2"}], "]"}], ",", 
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<R\>\"", ",", "\"\<H\>\"", ",", "\"\<F\>\""}], 
            "}"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Traj", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "4", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "All"}], "}"}]}], ",", 
           RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Time\>\"", ",", "\"\<Trait\>\""}], "}"}]}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"ColorData", "[", 
             RowBox[{"97", ",", "4"}], "]"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], ","}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{"sigmax", "*", "slope"}], 
           SqrtBox[
            RowBox[{"var", "+", 
             RowBox[{"slope", "^", "2"}]}]]], "*", 
          RowBox[{"Exp", "[", 
           FractionBox[
            RowBox[{"-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"Traj", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "-", "\[Theta]"}], ")"}], 
              "^", "2"}]}], 
            RowBox[{"2", "*", 
             RowBox[{"(", 
              RowBox[{"var", "+", 
               RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "All"}], "}"}]}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Time\>\"", ",", "\"\<Trait\>\""}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"ColorData", "[", 
           RowBox[{"97", ",", "4"}], "]"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{"sigmax", "*", "slope"}], 
           SqrtBox[
            RowBox[{"var", "+", 
             RowBox[{"slope", "^", "2"}]}]]], "*", 
          RowBox[{"Exp", "[", 
           FractionBox[
            RowBox[{"-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"xbar", "-", "\[Theta]"}], ")"}], "^", "2"}]}], 
            RowBox[{"2", "*", 
             RowBox[{"(", 
              RowBox[{"var", "+", 
               RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"xbar", ",", "0", ",", "3"}], "}"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Xbar\>\"", ",", "\"\<Starvation Rate\>\""}], "}"}]}], 
         ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "sigmax"}], "}"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.675510406553512*^9, 3.675510750440186*^9}, {
   3.675510798823468*^9, 3.67551087298641*^9}, 3.675510930106698*^9, {
   3.67551096131392*^9, 3.675510970706945*^9}, {3.67551101115549*^9, 
   3.675511216352687*^9}, {3.675511250792829*^9, 3.675511468768923*^9}, {
   3.67551150013801*^9, 3.6755115970536327`*^9}, {3.675511643452642*^9, 
   3.675511650019848*^9}, {3.675511698090906*^9, 3.675511751817554*^9}, {
   3.675511790184196*^9, 3.675511892620276*^9}, {3.675511928765258*^9, 
   3.675511997088962*^9}, 3.675512049291587*^9, 3.675512104232456*^9, {
   3.675512153724985*^9, 3.6755121971547832`*^9}, {3.675512231643217*^9, 
   3.67551224368221*^9}, {3.6755139560651484`*^9, 3.675513967518579*^9}, {
   3.675514147810644*^9, 3.675514245582481*^9}, {3.675514308509405*^9, 
   3.675514318262227*^9}, {3.675514350596039*^9, 3.675514394033372*^9}, {
   3.675514780098503*^9, 3.675514786329472*^9}, {3.675514820519312*^9, 
   3.675514820807386*^9}, {3.6755151933986387`*^9, 3.675515202268057*^9}, {
   3.675515278411462*^9, 3.675515298929015*^9}, {3.6755153449857597`*^9, 
   3.675515449861429*^9}, 3.675515504012631*^9, {3.675515547195858*^9, 
   3.675515560355579*^9}, {3.675517202432406*^9, 3.67551733444901*^9}, {
   3.675517646730052*^9, 3.6755177125275383`*^9}, {3.6755212676570473`*^9, 
   3.675521276107579*^9}, {3.675521307127954*^9, 3.675521316750708*^9}, {
   3.6755244987446404`*^9, 3.675524522966372*^9}, {3.675525154606062*^9, 
   3.675525164835703*^9}, {3.6755252106523*^9, 3.675525227334322*^9}, {
   3.675526712397462*^9, 3.675526812326729*^9}, {3.675527548371623*^9, 
   3.6755276402486467`*^9}, {3.6755276718741207`*^9, 3.675527744519203*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{GraphicsBox[{{{{}, {}, {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[1.6], 
             RGBColor[0.368417, 0.506779, 0.709798]], 
            LineBox[CompressedData["
1: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
             "]]}}}, {{{}, {}, {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[1.6], 
             RGBColor[0.880722, 0.611041, 0.142051]], 
            LineBox[CompressedData["
1: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
PnqH7wNm2QfvB89/dQTGKiV63J91LQj9dxzhpMaaFv77nG+T52t/OcLB6Qvd
C5gh29Bj5QDb/7MF/p8wb4iPFnMQOcHla1IX1zHfmtR6bX3UCWivkol9w6wc
9ookj9IJYtO5hX5i3mJUkX1z3AkMLXb5CLD5Fra+9KNidAJpmt/MRzGrWaM7
GixOkDwZ9YMW885B6/RVTicwfnD//mnMJaVSlB28TuB/6b7oWcwaio2KfwSd
gNCvLPw85r3Fc6GSYk6w2yodiu+Hzhn++ftyTvDu7kMXG8z7fXfpVhWdwHz3
FHhjrvTgUudScwL67LaSKMwH90/X5xs4gcjDHy8KMd8Xp45PdHWCMMIPOh8x
K38xDnPzcoJPVkbL3zDP3inwUvd3gpIi6YpDWLyRnTxjTB7pBKstL8O5MLv8
kuPJSHfCzvMz99ww/310hckv2wk8PoZWhWPO8XhFqX/LCdLCdbNTMHe+M/pB
W+4EbDt/jtfi+fDcsy+30QmI3gmc+IL5ScijttAWJ3ghe33wD2Yd4R91Zu1O
cGUnUoECy6eo0rg8pldOkM1/3IgP83Hzvmu/h5xg/8/Hz1L4+U9DGTc77gQ3
qy/zqWKejsvzKJ51gprwu3fw/PS78MHm8kcn+Olj8tYXM+kOl6HdJye4/kD0
XhRmCee6CxxbThDjxsmG53eWai9F5WFnGItqo+nAfJbgGGEiqTOYNhb87Mf8
4qnBrusxZ2DjFPZ+g3nz7Nz7syed4Rb3o/1lzFcXOMfJmJ2hYaSHZhOvDwXu
PetszrA2PVe/i1mTYvfBfT5nuPSqOhOvLwtdMrfThZ1BWu7q4FH8//+XYm76
ijvD8ZCdTCrMNBI9qXrSznD0NO8cHeaqTfKYc/LOcOd8bAMjZnRXP4hWyRn+
nr5Ox4J50vam27aqMzSmM/5jx+zN8N7qjZYzXN6eDeLGTDTGod+o7wyeGZdD
eDEXJLtdzDVxhq91J4/wYxZVfCAdaukMDtqf2QUxv9rfFjSzcwanGJthIcx2
j6U5pJ2dYT6VhkIE8w/PyyeYPJyB/O3LWdzpXN1kv32cwX7bWvEcZp73ZP/e
BTpDlnq1PO5nN/S228KcoVfo5zj+eyOd3JWiS84gTKJEiHuDePZddJwzUGbd
HcD7u9LOPmqb6Ax8kg7i+HiYwly7IM0ZxomH5fDxPhK5/5T9ujNMNjut4fNR
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
             
             "]]}}}, {{{}, {}, {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[1.6], 
             RGBColor[0.560181, 0.691569, 0.194885]], 
            LineBox[CompressedData["
1:eJwl2Hc81d8bAHBK+MoslUiIiJCEEM6Tvffee49rjyQkK0olimwJSWWv7Kzs
lKjkmhlJdiX9Pp9+f3m9X8+955zPc57nnPvBYeul67CPhIREmYyEBP+7tLar
rug4K8N+mcplOqQd9RdQcsvntCGHFZ2qNzvtaIQ61OR4zltE+panNTToNRpt
El3fnzONvInsUc1XO5DJw0PwM3sdVR6ZXfyc14UqYl4wHDuyhZZr17wZRLoR
fYDmtEjcDhpWuduo3NmNOnTjownef5DcdWWxyO0exEweMbeevR9EchV3XkX1
IeU/WgP7PpLB2UQTwyzhfuS/cbKG4Qg5mARXTgnM9qPBqYa4c3GUIHQuOjqb
fxDtjd30kWn7DxJHwzOyEgcR/5CpmcYfKjjUy1rj+WMQxTTt8Lt508DHr/ZM
v1qGUEVV55GQp7Rwl+yY06bgMJp6lrIXO0sHKt7VT2WyhhGbJrPzW34GULaS
3ZaIf4tCpGokfmQfBne5b7+UE98hhhq20h1pRqCuGqDgZXqPCi/EnCL5yAjj
RUE5uk/eo3d8hgfpjhyF3Nb5h3+GR5HQ8Y1P/HFMIPzhMD2F3TjqTDbTEeE+
DnrcpbJxhz8iS/q215fajsNk6O5Rpe6PKIHibqnqH2YIZtShWZb/jOY3z4U7
e7NCcITqHCVMojDv1A0v2pNAS1stMlI6iRi/7TkHPj0JjuH7ZcrYiUh2pk8n
epYNaCR6C77QTCGthUqGYX4O+PPkiV8c3QxifrLwxuAKB7xlu5bh92AGzdmz
Ro91c4B5L/15ItcsCp2M+jXpeAqWT3bu81GeQ8WjetPfszlhJ3mht6P+K2JP
LVOj3eKE4e+pMtKEBZRiyFDBr8YFy829pMC7iCLf9Ue5bHLBjcWG78eKlpDJ
WxXuaRVuGHi/wX+IuIL67xbeIs3ihhoZbscfdd+RvC7FNtsGN3Td92ToVV9F
QkPtneaZPNAQue6UKfwDUQ4gl/drZ8CC7FdmHfM6CruVObShxAtBV6+cSk1b
RxsafyQOZ/BCsU6gX/2JDfSlt45KW4kPvuozUFfybKKqHtGS7vSzsFgrdJzc
aBs5dJz93iAvCOXjL2dpqXbR+I14o48PBWGv7sk1jYJdpK2w0PRzRRCotZ53
Ocn9QVLtBUliD89BzEzuVsK1PURFpD/+IUAI+FeY6EyvksBrAA2nHCGoPSLM
d7WXBMKzvSK23ghB1dNHt3RYSGHLqn+BkeM8EElSFzOrSYE4cbNO5815mDpq
y5oxvw8eydSvTG6eB3/Xq3sc5/eDYebiKQK7MOS6r+W5Be+HXguVm7f8hUGW
/kPn0AEyiHkV1MSaLQy2FnOjL1TIQJa1cL2kRxjyB6xoxm+SQc0ncvM3bBdA
jRDx8x7VAfCVEksyVb0APQkJ9YuKB0DwkUP7gt8FWCmv3DoWcQDyzdr5KXsu
wKORsydvrhwAq/p169SNC1AVHqaTyUEOzCyc97nZROD3tnrjKV1ySBqP+CPv
JwLPWJ2CeZ6Sw+MfP8/teyQCTgXpcQuD5FBH6WPb1CYCXwVv253dIIcBtsXk
0CURWA08Gv2FkQJmxGw7JQ6Lgs9lyP0pTAE/NcZ/bkmKgpsbIdtTkwJoHXT5
K2xFIVv6Qp6IEwVwhvZYeseLwvYbAUq5qxQgfk/2jmCZKLhH33C6m0QBGsV1
bUtjonDzyOidEzkUYNsivFVIKganbxknfCqlgMAPxWccecXAVGz1Zn8tBSR8
P2XGqSMGXcnEle8tFJBDnp44GSQG1QxBoqiTAqpYDzdnZIvBoeGln/XdFNAr
cnPNtEsM6t7ozjtiJqrtP820KgbRWW4vLndQwJbtFaN3xy5CwoGXZFrNFEAd
sh53F12EacaXMXerKYDjjluDltNFSL7c8Zq+hALECqdXqG9fhM/RDHwDGRSg
1mTG0VN1ETI51TbeJlCA9fu3ejETF4G+clWQO5gC/L+pRcuTi4MXlfLjPlsK
iCdrryEVFIesukMfh1UoIItFaqnRQBxMrqXvQ4IUUCFcwRp6VRxeEnY2Wegp
oFuFX1visTgonUkV8PtODhPW+ZFbveIQ2bZRp9tLDuuBJyrLN8Rh0X4BtRWQ
A+Xt5HnCCQkwOpq6OBRGDsKvotSX3CTgYsnv3V0eclAa2Q0rvCcBgb+5lER+
HgDzJb+XDvUSMHQn3Ad1HYDo4w5HJ6kkIUFISIba+gCM+ytMjhRJQlZXEVE4
iAy+J7w6dHdIEp4lG52vlSADsnxRBa2fknBLRDbi3s/9IDh8urhb+RKknqg+
fdNvP0QKkvs1zl8C0tOHi2NN9kGqQljBFTopqK5+9qSUbh+UmG99EL8oBTkT
9w41tpPC+/g56fJoKVhb9DH8epYU+OY7KApPS4OQ1t4RCeJf9DYrJv2OnQwU
p8jLhPf8QkfNL6KYeBkY3dB69h/fL2TMND8V+lIGqvtk4qfifqKJJEU+578y
kNoQ+5RebQctRhyolUlHsOlw8PqJ0U0kIFNpLtKKoPbpeNOU1CYi/LIn4VtA
INw5/Y40fwNdkZjKi2cBCOLTr20MWEekZZeX/F0ALJPEnbjO/0Cnko6/Wg0F
uKbUyF2Uv4rkPX/ccksCUNNPJdVlXkXRfDnCNtUADXd/K7xiWkHUeSQh6gcu
w1ORPpoI5kUkGPFBrZPpMlx/P/UxlWcBaVm9YJXlvwwUC89vL0t8RXdZrFsu
6l0Gqu8f8lI95xBTchMlZ85luB3GZ2d6fBpJ+qSOZ1RcBh9K52NjOlPITNur
hKnrMtAzjC5M3SaiTGo2bdrvl8Ho3gR90olJ1Ly4xRG3TxYc94RJ9N9PIGJX
//r+o7LQq9tZGhT2GXHdCEv9KSULnipOry5/H0eKdoYuftqy0ECprVxePYac
Lgte+m4nC9c7DQNexH9AxX8+T8zEy0JQiMteq9Z7dC5AmnvwgyzcECcWTegM
I239Izuqy7LQTPpXycx1CPkIf+t+/VcWRP37tKgSBlHFyiOPem45mDKYqzca
6UPve/2QmKQcBE2HK9mq96LtYnWGlxpyoBCUSGB914MknXYrCvzkYOy3F9/H
o13IXGEkmiNWDg7m8fpv9negq5wlxo/S5WAm93Dk6v3XqPmL2e6dVjl4p/OY
ukyzDU29utBP/V4OrinqaiWiVrT/0cHsmAVsvOEKc1/pFqRoXC93lV4e2ig/
krC/akTDW6wtmaflITpo3k/ycwOyvB8u0ywpD8JL6XJ1x+rR4oXpeqKWPLge
ZLsd5VaLAoYVJPY7yENL2qGv10er0T7vwiquEHngGTU7VmhahW7RHRRRvC0P
izbMv+fWK1CB+qBgXK08BIguE0rsy5DwknBJcb88zA1txiHJl6gx7j5v77Q8
EH+/2yE/9QKpntkp+LYjj/XdxpCoWCl632HKRUerALS+WtpiKiXI1uFVjhCn
AlSlPUixuFKMVvazs+mKK4CG2aei/94UIorLs8fv2yrAgUN5M+UNj1HyF6XU
qkAFqNdoSaozy0fsYcWMHxIU4InV4auGh/JQyQmauz9zFOB4/set819ykHi9
Fx1LtQI8pj1MRd6SjdpNhhOkehVAeMY7V8QjC2nviFBZEhXALubeyfirGchZ
9BdZzkFF8GjwFtkhS0Mbb80jW9kVYS0gUWk98AEK92n6Oy2qCPVMvWMTFKmI
muHU1QNqilBCpnbgW9l99OB51C9ua0Xw+04T6ByYjLg05wOV/RXB9Glwarne
PfRiWWXTJV4R7l+qKFNSvIu6eOlWSyoUoW11vSzDOQnpd3l79Hcrgu6Dsxkh
Z2+jSceRxe8TirDBkqrd9CQRuR+46MywoQiJd7iNuuQS0E7ew1nh/5TArX87
IOhPPIqS3bXVP6kEXZwcXSPDcYieaDnpf0EJ8n0lz+1vjUWPrrVYpCorQUjQ
fwPK3THozEmujzUWSrD9rCyZcj4aVTREG4/7KEHVwEx1y/FoBGYL737HKIFl
7m8CrfUN1PtTTY81QwnWTnUm5dZEIeMHpYMyZUpwdODpCdVTUWhGjEHTulMJ
3uyLPf41/ToivPN9E/FJCb5Vnnbx57qOdn3fK+f9UAL3D9ej/9ZFothDEh3t
5MrwUk/J4YllJGJ8mS43x6IMg3eE7bJpI1G21l4zxXllCKDNlTzXE4H4V6xl
eBWVofyDLnlRUgSqSWirVzVThnff+hV9bCKQ/FluCXeCMnhoftz6cykCDXbH
ViXeUAa53GPPetkikLnz0oXnacpwg7681Y06An0l13w5+FwZ0tWGo/xII5Df
4xeCa+3KQNdC5nVzLxyRyB8uOTyuDJJnGL2s9keghCl/XtHvytBR9lK4iC4C
MUV8KDAkUwFx67FQPs4IlM92iSvoOGaTo1HPpCOQUGNGzkNBFeDIAVMyqwjU
YE7CVi+nAhkT6eaUMRFI5bfto0/GKkCkfVPysDICRW4uMN13x75PkzlNnMM+
/51wXyNcBQwIYx41rJFoc2GbgTxZBezX2AQYTCOR4EzYrcYnKnBj+OK76fRI
5DRx4GBgvQocvUpRfHYay9+HhJhzAyrwODNMdv7cdXSoLy08e0sF8iz+82wb
u47UOjn+GFOpwqGooe/fxaJQVEthMMNJVWDQT6958jAKbVVW+UQqqMJN+qbH
y1430LkX0t8lTVRBWuDQmYfTN5BzcbvbursqtKazBtFZRKPxzGF7+2RVYKld
HCi1iUGHH5oQTxSqgvJPW1GKbzFI/d6kxbt6VbC1V6GODYtFjTErhorTqvCm
40aif0Uc2o7wf7u3pQrh1madbCbxSCh0V6uaSg2a9ZmjPchuojwClcoZYTU4
9lxKLcIrAX1yvfN6UkENjgo+s757LhEddWCSfWiiBqebtpg/byWiWBPuS1QR
apCXQxToSr+N3GVlBZYH1KCI5zT7z5w76LFUd1H+tBok3GbitOG4iybEtLkt
ttXgUPIVp9OP7yLts5Zs/SfVoSS4uOBC3T0Ud3o2PVpYHX6UdIfVqCWjVjZ3
JqSoDsfUfpjSTSUjUcYQhhce6rAe0FZdzpqCPGlJbzlHqIOsROMh+bYUVEgZ
S8VxXx34ehvP8XumIuY/9/ffbVAH5m+L5PdHHqC92Zebvgc1gOUKuzbJ13R0
cVLch59NA5yfmkeHNTxChPGmlRlhDUgnG7ZOTs1AU/198wamGrDgqSItbZuF
WLr17Wk9NWBje0/iGG820m/7ONkRoQHBHQ0TtfnZqKN6YexikQYY7zK62T7J
QX9fEgxXGzSg8md59CPBXCResj1cOKgBvUvPjy7U5qLi7AO9x3c0gDFqUJn3
cx66HcfR+FtRE1wOxOwGmxQgYfkLc6bmmvDzOm8B6eEn6P2ePG2dtyb0Bsae
Jww/QSf9nC2DHmmC3IJsT4ldEWoVDIkefakJHOwLZcOixchh4WapWKcmPHlV
euE27VNUYvl8b+OHJrAKrRlEj5Qg7eMt3PoUWvCeV+oGe+sz7Dwe1iw/oQXj
Mbn29NWl6JLKVqa3khbc56tX+Wz2AvVckEYrj7Sgxi6NdiuhDHmuaDpplGnB
t75z0quc5ehQkfXtkk4taAjlHnJpKkcmJ6O+uK5pgd4Gd786WSXyi5ptWufU
hvDtwQd7XdWow2ZFL09QG4ybMwtYY2oQE9qe15XQBsbmTJ0C1VrU8JOSvkxT
G06ltvS6T9Wh/V781oRgbXCvetHBZNyI9NVFN9iitGHoPHlLn3wTKuCViR24
pQ0ypw/e/sbSjFRntF4I5mtDg/Hn2RqmFnTXxJfkW782BBxdjeiWbMPO09Dk
R2PakDmsnkLZ24bEGG+cUZ/RhvejuWufrdvRWH+K9tOf2pDT+7gtEPv9wC5f
l+3CpQPxUarW/me7kA9Hm8jxczrQwLPLFTTehdr33nR1SeiA2byOskFiN3Ku
/bzKo6UDP9SC5Er3etBzQdLLc8E68CfR6z9S+n4kc1yZaDugAxdapdwe+w2j
j18y70yO6YBr3Cm6C1+HUVDB5mXLGR2goyq1sLF4i8ov5OWa/NSBR9z5LAT1
EXRGc89Om1MX2EZpWDsuvUeHr1fMSQfqAn9t34NBzXH0QuVgan2ELnwcDi3Q
GhlHmvS2ShIJupCZJ87PafoRxWbQFYrk6MLUVoybquMntFft6nL2DRbP+k26
ETqBvi6zLzOx6UF7B8vq2mUiulEe+CiFVw94DpyiZr9GRKdC+tUZRfTgKLPj
lG49EVlQhD6jU9GDuY9um6FCU+hX37BFop4e0BsS/DRdptCDZF7ag5Z6UFP/
wWg8ewoNc4x6kvvqwaZkLef4wWlE+CrAFnVVD8KJR/vPomlE8zxqgDRWD6jf
B1xbJ0wjZSlhoT+P9OC/X5lPnwxMo9l9cZMhT/SgJXUrMHB3GkV2f0naeakH
q14iZFE8M+iVYeKP9Q5svFbGDs6gGWTKOpPjPaQHPTzheTkZM2hnWlL3+0c9
ULhTWny+ZQbdL76zz2NOD96C2ec3UzNI2Ptr2eKqHpi482q77JtFgxeRnfNv
PcisLpYlY59FHnv3D88d0Ic8zoATDy7NIqrXy2129PqgZc3vz2EwiwpvyvkR
mfVB8OXTY5nus0hBN43L6rQ+BEWzblNHzqIpph8jn87pg/UxGeR5fxaFf1G6
YSqpD9z3+OXaCmYRa0Gm6Ad5fbBb7rhOWzWL6tw3Zw209EFRQ6hIr20WGV9Q
T3lrog93nDf9U/tn0ebPXEUde33gIUvs/TI6i+42/9zq99SH/dYeqRe+zCLy
yinuB0H6wPqK9LjGzCwKKXpjaBOpD88cXou3zM+ilYyKaL4Effhl+Wg6dWEW
2d7NqFq/rw8rJdk1Y5jfR0fPNWTpQ4kT99btr7NI9YrX0egifdicEAlon51F
jV7Gilrl+tj7zpn8COIsOm9/OYDplT6klg+7D3+cRfnGfAXEDn0Qprkr2Toy
i5g0Dr8vHtQHpTSxOfPeWZRwefeA37g+HPh0rqS0dRaRiM2KSs/og0BK4qn2
6lnkx9fvQL6iD6VnAwWLn86iryer7w9sY/MLntv2yMT2hyJu0+agAfjOIuv2
8Fkkv+t9+uwRAxgNvC7lQ5hFNaumBhsnDSArZO68iNUsyhrjr4wWNoB17rhX
ZyVnkefTQb+nJgYg8ul1oNv8DJrKqs33szMATdum55eGZpBhcu6ItIcBvG1d
Zk2sm0EyV/1EBsMNYDEykTB/cwbRaDFtbDwxgAk2wpP3fDMoXI6Uq/GlATiq
z2XRHppBGxcX9WLqDeDFlzbTMz+n0Sf2hvLjAwawpL7P8GznNCpZs/KV2TIA
ky7l8ki7acQ+r5xHQWIIlpy+YROq0yj54/m3g/8ZgvNt9yVH4Wl0pX3/BTtW
Q8iqObXIsm8aqaY8WYuRN4SjBjw87/KnUGN80ikdTUMo/Nxra3RrCglfC9Zl
NjYEz+/omETQFGJ2VisrcTOES1wZNwU0ptCCxHfvobuGECn0skB1l4jMBT/k
pD0yBFeZCJ5LC0Q0eKplyK7AEDrD37IUvieimoP3zm/VGsJv1WF5knIiiv0s
9oOZaAiJS0IRY95EdF54NqB6yRBavp3QzLUhovHoe7t6W4ZQtP7fPJUuEfEL
rVIkHjQC13cOCq9EiOhdVGYi71EjEB/ar0LBQ0RhY+qHO9iNQN/re/qP40Q0
FFl08q+oEWgrKh59TEpEIaNG+elgBGFM4cXuW5OIi5+cT1zNCDhTgtyHliZR
X3jF8xEDI4j9mc40TJxEAe9sRb2tjWDvc7SMx4dJxMbHUE/jZgQXLVrlcgYm
UVdYExT7GwGjyA0n985JxHzmhPp0vBHkn87QaK6ZRG2hPUPX7huB883gz/Jl
k8h9KMjoRLYRSGby8RmXTKIj3Dyfa4qNoNcuu3+7YBI1hryzNag0gm7GBjWO
3EnkNHD9648mI6AJMaUczphE9FzCnrd6jKDnaqw+RdokqguaXOd7ZwTDIRJu
jSmTyK7vVnDnFyMwTnP22bg3iahPSf+1WzSCKAJ7WMGdSVQVsBRFsmkE12wy
7wzdnkRWbx5SZfw1grmi0CyfW5OIkl05SYLKGB6wjSdEJ06il35bR94zGkNH
l5kwFWbT7vx0HzZjSExMN/uVMIn2n9TjoOMzBo207W49LF7iQ/rkqYgxXLSm
FzuMjWfQ+ZxfGRnDf4+eaYli8+2xWJbNqBgD/RfKpqqkSfSEQC0eoW8MTc0T
3Ml3J5H267pXrFbGsO9ZA1dP8iT6edxFrs7FGGjzpHQMUidRruexbkM/Y8ik
sJAVxp5fve215nqYMURsUyZYYPnZPOY3cjvOGN5/kGx+mz2JMt1PmfInG4PB
mXbCnfxJpNwy+KUr0xjm+/iF7hVOojRXgSXSCmMwfppw1uDlJJJr+kjIbDQG
3sSl+7RVk2j5cPyWZLcxpPxJ9Nirm0Qyr+ZI/SaMod4965vv60k0z3A/hn7B
GGzrLi+s9UyiJEc5mmfrxjD4X/TPtMFJNE2XzTRHaQILOQoaJp8mUaytyTnj
CyZQ0cngL7o5iYYoes2lYk3Ay30lrYOXiLTjqW257prAz1LewM1zWP9QazhR
PzIBjZzzHmximBn6vT89N4G8vahWc1ki6mcZjA4dNYHs+bPLyqZEpJlJn2BP
NAF6Kb7DJ6yxOLvOHfUlE7jM573vkwMR9Z0eTj/x1wRGKo2FTmD91ntu5EUD
tylcOyW7FxBNROpljFX5QqYgG2hyPu4mEb0RMahPkDSFv3af664mEVGPxPvX
5pqmEF3xtu+/NCJSbTj6Rt7YFPJvilzLysTiMkaD/Lam8HSl8v3hPCLqlvsw
vutvCtJ5767cf0pEyh1MkzPXTOEKTb9fznMi6lI2me2NM4V5n0CXOOw86NIY
//4owxRUdbvUl+qwzw8yb0Y9MYXLb0wd7RuJqFPX7Jf7S1OoDaoarG4hog6j
T2TSr03htuhqynInESmOn6A6PWAK7pRCqX09WNzcgo5mzBQmqXuEYvuw+JcM
xs0pUxhfETE9MUhEr20mjn9eNgWFlw7H4oeJSH7mJNvrLVNoWqEMGRohonZH
K65nJGYQ7y+es4adX+1uk4JXGc2g3KRwp3Uc+/wKu4jDSTM4pfv4sc8nImoj
2EhonDGDpNw1uj+fiUh2PUdGVNgMnvCv37X9QkSt/lNyrFJmkJMldj9vEovv
nFI5oGgGmy+/xjQTsXiIneY3LTMosTo2VzuFxf/k6b0zMQNFpSyRpGkiark2
Y/zKzgwqJWtJ5WeICPadtnzsYQbLKdoz7zA3RznYJQaawXmN51cUZ7E4RYGz
f4QZNMrzeKVgbo6b87C4aQZ9QyEeHXicmsdX4b4ZZOtY8Y9ibrrlFCSQZQb9
g/LO3ZhlGAqvHikyA1aBgekMzI33vkb+KTOD/3QdnAzw+FHe2NkGM8jvCmte
xeZvfOCS2NdhBuIHLVsImGVYiu9WDprBFZJaeI+t/1XGYmrGuBl8YhI+fgqz
FPvZjBszZnDW59sZA+x5G3Ldcj1WzODYGz0dApYPqdMlTwx2zICi1z7AD8tX
w5PlEul95hAqqB2G5zPm8JX+9YPmYPUsQPfyBBHpXvtvteiIOXg+WMymxvL/
1ZD7wlFec+CPf3LKHduv8tYK/V5hc7hRW8iwbwy7LwTlAiKlzGEj+OuPmFEi
OkJuXbuiZQ40KfJ/HLH9n/ReGc83MYewLcOpFqw+Sj6H7pramcNrRfuz9EPY
/lQ+RJ0B5iCC4jXisfrytH/7OivDHKbak89SdxCRxKDNvMETbPzzmYnH24mI
TGqVkvqlOZRPlE+ztxJR2mEa9aB2cxCX8rrKjtd3q+Kw9pI5tPDYMu1UEhE7
R90EqYQFFJxJY8l5TERLCcokNbIW8FpCOCcH66+qnfccnuoWQLQvv16Qg/Xv
4Lr9uJUFsKkEGjZlEFHwNYGlsmgLCBQjIUqkYPW6VE/tkmQBVj7NLK7JRERv
pCrIlmYB+5nz2HLvElGBoJP3zWcWwDt+4wPfbSIa/py9bTdiAXfA2eRJLBFl
qJw7zjxhASrvaZRPxhCRc+UrycF5Cxjd/M6fdYOI9hLGr0r9tgA19dHUpkis
/3ecs9bILOFlUgbBKoKIku23mwtpLeFt4NDsf+FEdFaKkezIKUt4zpPFfO0q
EW09yT395qwlPBhbp1INxfrh8HmlCFFLGPXz2mG7QkTGSxrx35QtQYV5/M9y
EBFxGn16mqdrCUxG307PBBLRSqtrn4m5JSQJ17vNBRBRVFoMfYeXJTzj1VWm
9sfs+DFGK8QSdHTHUlj9sPcT4XN/P0RZQkvYyU+XfIkoei8ywPa2JaxqiR9w
8sHc8/7b0kNLMHxd9SsTOy+jU/gc/POx9RD/Zk8TMNuGfdortQSj8ogPIphj
fp1+w9BuCW2ioa67ntjvm45g2fR+7Pn4d3x9cN/tq+UaswSOd0/cNzwwW3Kc
L522hE6mGs5I3Hz+hRdXLKHxvpcDC+6tLraWHUt47a36u8mdiOJaT6Sq7reC
sKGjJV6Y428RaEdorICNjk+KD7dp+w0LJiswokr0+O6GmZvpz9wpK3g3y0HS
hPnmmpsfQcAKEocSXj7AnNDYtPTzohVMXCmRDsUdf9juuqwVkCq8snTBbeg0
Tq1hBcyHQ/qsMCeeqtdJMbKC6lTly7hvrdB2s9laQSu5FMEJd50tFLlbAWXL
NG0Q7uiqauFAK/DOZxxKwnxbl+pcQ4QVRF587/ISc9JJywKFBCu4tO/6zTHc
iy9ZB1KsoPTkyjwl9jxJVQfuG+dYAS+prRDCHWlCPfXUCt4bdhwJxa357Lpb
lRUINa4o4/m5w0z6e6PZCiA5P4QSy9/dOX2fsDdWEFDeaWaEu6xwgeK9FWiW
uWY8xa2q/YF5yQoOfPlBboftz72j+Vr5m1bw+YrJ3deYVX9cmT5KYg3f+rwV
+L0wvxowzaayhhFZv1UybL9V84KPztJZQ85bTZ0A3HGcw7xHrKFFk/h0EbOa
QaBKOZs1RBm08X3E6kf920nxDhFrqNtLS3uL1Zv62651KklrqCXLpTHA6lG9
1ue5FrKGVCUSg1HMGjc6uMdUrGEhvcHlM1a/mqyeR5YtraGnPEN8Aat3LY1X
awxx1iAbwzA8hPWHpKqQ526iNZDbJ8ojrH+4lfIW5u5aA/c0aXsx5l2Im6x/
ZA35rSphV7B++yq9a1aQYw3+blvRk5jfSnqNJhVYQzqForhcGBEVixj0O7yw
Bnl2BSDF3t9TznepaFdaQ5fvRYI55gjBS68l66xBXVDpdwVm4zMcDXTt1uBw
PG/GAutv8hPfimpHrYEhyehRItb/a0zWp/M/WYOVcs2FYcyfj7zNvkW0BqC2
6D2MnRcVdLWpdkvWUEobuZyIOZua/7DmKpYv5QL3Dsw3/8u6Jb5pDeM/KL78
xmy7/8YNmr/Y893RfWBxHcsPyQ7Jzn4bCBwmTMZhlvjjGjpFaQOlfEms5Zi5
fn3e7qWxgbVWRr0xzPTb2r7Vh2wg28vpxi7m3fW2lZxjNqAT8K32RBQRza+K
uSacsAESiw9bEpiHvxXNBnDYAMuTVVl9zI2LJ2xsuG3AdD9ZgRvm4vnbn9TO
2kD7XuGZcMz3Z/YZiwnZwJ1q4ZE7mMOJ/m/ZRW1gvb6gLBuz+8RXzYOSNmB0
rae/BLPxR7OeTRkbCN6nIVKFWe5Dv8KknA0MZxh9b8As+O5yS4+yDdDzFVO3
YGYerpCq1LCBCdGUh62YyQd4arJ0bWDbaSsPj/94k3Yh3sgGmPx4JBsxf+qi
ee5nbgOeHgfcajB3vQ7ns7KxAbGkMYUXmCta1x+rONqAZZb++GPMWU2OHCJu
NtB5MEb8Ieb4hrFHJwk20BzygRCPOaBWnek/fxu4NkKaHIzZtqrp3nqwDThX
M5Y7YtYoF6abCLMBzRnzLzqYxV88ju+6bgN+jeZ8lzBzPWMiL4+1ARTa+fgU
ZvrimxEZiTYQfSDYjhLz74K93Zi7NnCT2st/Gduf4eyZdfNHNuC01j3xHHNj
hpGXUo4NELUyTW9jLkrrWTxfYAN5hHhfD8zhyS+I5C9s4CBD/OvTmAVjQwde
tNmAnpTC11isfkREhzfJum3AVtStxQyz5BTPCZN+G6jOHc4XwKwo9daZdAyr
Hzqb6X6sXq1WeffprmDze28++g9zkvGoyDqTLZyQ1C71xvvjgICZ0klbyPv6
aUwG86OyyIh0TltgQduK1JgLqQX75QRtYRB1nyrE+qulOcopWc4WWlTcvGax
/uvyGE/8qmwL5w4Pi1dh7mcWqpDStAWx4tLnMZjH/T6SzBrbQul/Z4f4Ma+d
EU4T9bSFOz11P8Kx/t55F9Mc52sLyT9kJIwx70V+nvscZAth2Y3+QpipPsde
iL5uCwpN9+amsfOCPn7CZDzWFryGl083YT56USRc8JYtMGwrE9Ixc9750vv+
gS2Eqz0SM8LMJyO6zpdpC0+OFtSKYRZaij9+Lc8WarMqDI5hllIQc+QptYVb
EbzEjyHY76O1mwlXym3hgGL72ybMylnEsoEaW1BJpZrNx6z/M+FvYBt2ZzD+
cvDBbFowdbq3yxZOP18ZMcVsrSeuzt5vC05kNTbymN2fTT/o+mALV0ZPDjBj
9jGVaDoxYQvk1NtPKTAHUdyeJUzbQoj5f1mbwdj9biMpfHzFFgh1VQ0jmBNo
k4w91m1hnZyS+Brz3frZsJYdWyC99Ja2BvMD50uPj+zZQpkSl+xTzJlH7rxx
2W8HT5jGA7Iw57fO/XhFaQfWH70KkzEXe0kxHaK1A77Fw8PxmF+cuCvjeNgO
TF53rURgruqet69jsoPrHCE/gzHbutk/3GS1gzPDhQd9MdPSEPuEOO3gJc/d
HXfMdaUW+9zP2MHcwps6J8yO2uNiTwTsYGloXt0O86E1Q7cpYTuosKYrsgrG
f4+/zWIVtwPzbZduc8yuotojxtJ2cE3/aKEp5iOjvZTJsnYw7E6OTDA3B6lI
DyjZwaEtjlhjzO7MHd5UGnYQ+EP7Km6mBtkCBV078HuiwIR/vt2iaTzcyA6c
pRJ08fEIfy/RNZjbwZWRsdP4fCdyauS2bewgRnHqpiXmLlnRIGEnOyCJPxNm
g9lv5mWJh7sdkGsJbdljZo8WJBZ620EWw61vzph7eZ4emQmwgw2SzxYemIO6
eVTZQjFDEfhg5nLLDzONsANN/bTbgcH4+zBH+f1oO6iZU5S/ijm0NGN+8KYd
MASbGF/H/PZHirZSih3In7kUnYQ57N7hG5HpdnAsL/deKmY+0aTaV9l28KCm
cz4Tc2RQ3CmRp3bQSN2nVopZ+O+VDfZmO8gUaLEdwDyRvXPG/LUdcBRt7vuA
OV7W3yK1xw7GMq0aJjFP3fDsoHlnBw/baZzWMN+htnnwa8EOhkj3GI9i9ShV
+rlX9LsdvOv5vX0S81ctU1LvDTvQlmMe4MEM9/Rc5/fsQMG9SEUC8+pxRamR
w/aw/Z8LhRnmR/WtBLrj9kCjyHPKDu8fC/RY9aQ9+LweY3TDnJUtTttyxh54
42cCQjCrylbK7grYQ9pJUmIE5q3p84EXL9jD0eu5THGYNXnOTj6TtgfLe1Xz
KZh/dT1hXJC1h+xFnisZmAtcuVS4lO2hOY11JA/z3jPWsjRde5A6LTX4HHOx
VtrcOyN7EGRLIVRiNvxxlIXBwh5MWVsG6zA/E6GPinGyh1u21r3tmOW/GQQ5
u9vDS9Mppm7Mnx6nu6t4Y98fy+Prw+xrSbTmC7CHmiZp0iHMVMd4DA5esYd9
wg6PRjDnDLirLF+zB9Wghd+jmMVjy6T7orD1mgSx4efLAOycL42zB02OOfIJ
zI4/pblv37KHT4JiZZOY/7y8zky4h+WvJopjGnOyazetzgN7mOwiN5jFzM9J
t184wx7uyFFpzGNu+6i/fSjXHlInN/9bwM+j5LSl9QJ7eCyokrCIeU198svI
U3tQ4w4YWcIcd4B7pPKFPfhqtkwtY2ZvdOtKqcTiN1qrv2GuDnjZEFiH2fGM
/gqe/3PbL4yb7OFdZGUN7tl5qccS7fYgaQtzuEOzIx8yd9tDeUT5Z9yHTboS
f/fZg6s+TTbuYgbayE/D9jD9xVgQt2yPXsCrUXuY4tCIw+cbi3zomvnJHjgk
Rl/i6yFc+mJ5jWgPz6/QFOHrpdzg0rOes4eRNkYC/jxZJa5Kl5fsgZrATok/
r5jDi0unVu3hoJ2PD56PPtatc/s37aFhv9kLPF/27y9xzfy0ByQt0Ybn865S
J3XBfgcYo7nl/gUzLwkNaQylA1z/6njgM+bmGt1NJxoHWEwXDBrHvMI78Zn3
mAP8Zyj0A9/fG1Ocw1QnHODYFb1f+P6fSHfpWGJ3gLuVF6f7MatRb5Y+43MA
Hfl0ky7MU+2SebfOYeP71y/g9RVyNTzVS8QBtkIPWbVgLlw5GH5exgFMtRT/
1mImGzqlU6njAL8zaFEx5vQ4Z4UUQweYIUvgKMAsLFsqEWjmAL6vkzdy8Pum
XOKUhIMDVD796P0Q86v72usNQQ4g5Fb4PQZzgGnY/fYsB6gQXaezx3ymrUCE
7rEDpJNWiFphHj878Nak2AFEHT2s8ftL+g/boe8VWH6Cf3Vr4+vJbrl1vMcB
QotD6WQwV1EuCtgPOMC13X3X8P539j7UVzriABrbabsimN/I2h2U/+IAo531
p/nxfM+SxXpuOMCDGHolFry/NAV4an86ANtAhcwxvN+rDDr2/3UAwehY1cOY
TWILyB7+5whGP+ezD+L1eVY5ou2kI0SyfTP4g51Xw/cI7LRcjiAxa777E3PU
7oMmY17MueJ1W5i/9i38+XbBEfJJVK+uYn5OuBnCpOIISma3Ts9ith4rP26n
6QiVI5UJU/j9JPup5pmeIwQ4E6jx8zHgsMC2rKUjKHBf1/+I+UyoQUqinSOc
vlZxYgzz+MxV0Q/OjvCFYnn3PWaZqn5fD19HyO5sJnuLefXk9qGaIEcYupx9
dghzbgxb2b4wR4gXDXHBz+cDJoTV1FhHKBaU5O3F79uWB7enEh1BUCequAez
M1+LoMA9R6gfu3a5G79vfjN4tGY4Amup+PMO/H6wl6SmyXOExFb1G/jvAaE+
26dGhdj8IqFe7fj5LnpTNfeZI9iJvndvw3wvs3xhucwRmmbVr7Zilqf4FHux
xhFeKkxmt2De8iI7E/nKERi6NUebMRd+4O/sbXWEDl0qNtymlw0cj3U5wo+a
gcAmzNTFVw/Y9jlC0u9MYiN+nx8qyC8ZdoRfN6zMcROu9MttjzrCGd3IuVeY
OWa2pi5/xuKhV67hHlZni0yYcgR/cjUe3FGVShyj846wIb76uQGz2ElCM8c3
R2h+vZCL+2v0Ayv3NUe4c8HSH/cN8vhG821HoIhxNcR9KvoKq8auI5Ax08ri
bjrgESpN6gTXfeou4ja/YflRgNwJwo4SxXD/JNOWPHnQCb7fXJfBnRJ1+SEt
vRMwIHst3BfILuzsMToBr9iOE+7B61xG3487QZyPRyxuj/1Hq76cdILIGP0X
uKmuUxwZ5HQCJ0qZL7if7Pvp23zGCeJj6xjx55OPXBx+IeAEKN1UGzeR9NP5
HGEnGHtbegd3WERf0p2LTlD8WukD7prwF5o+l53gUFurL55PA5LcZ7aKTpBu
+rkT99q1e9R6ak7QHVzEhu8H/7WAngsGTqBY8eID7uyrUoqbzk4QcfWGA76/
cSFd0kFJTqD3OD0Prw/uX7WPnO9j69vP+R9eP+3BT38bpznB7rKjB+69oFu1
EvlOcMKA7jxeb+k715j4ipzgnsbCbdziQd6BzKVOMNzuuozbJ1Bf9He1E0hx
amV0YqbbVkheanACwSieH7hLAi6uf2xxgtrVqstdmOf8mV82vHECjoXIMdzX
Nw/SPxt0giQ5X3a83tn9/3hmvMOe1+KzHW5Tv0n+sC9OMKsb+AX39vrQTc8Z
J9D30juG90uyb9ui5YITNPaRquE+v16horXiBA23jENw9/sUFKJ17PvDAo9x
u62lUgjtOIFzkN8b3JQ+cY7sf5xA2fLqN9yPf4S8pt/nDJWecgffYJb1duci
pXAGPvZqLtxfVi2u/zjoDCcXuiRwhxK0poj0zkAPLqq4j6/C5eEjzhCUHmuI
u8pLOLuV2RkGvY9Z4tb7zvm3jM0Z7kmQ2+Be9TximcflDFIuCla4E1fIX93j
dQbFwNfGuPk8d1iiBJ0hvzFOA/dURu/piQvOYCjrJIU7rS/7nLiEMxTxCHHj
1v3jJ3FXxhlOXFqmwv2fgIrcspwzCKnkLeLP12zOqqGo4gzOJy1e4w5K+GGY
rekMsjEc6biFGl5b/9LDrL3jhvvr0kNXfRNnmFdYuIg7m8XTr9TSGcpFdvfw
/TBSkw2jtHeGm0SpFtwdxYt3GjydwYXKTBx32Hhj+lE/bH1/Ir7h+y1Gde8x
IRgb71t0Ju7HLpdquaKw8faSN/B6MX9I1xYW5wzLl94+xM3YPd374RaWz+cm
l3BHnUmYTHjoDNd4mn3x+rOd/0SxWeoMDSxkTXh9Mx97yaBVgeUnfVwV97Di
DZaiWmfYyRAYwc/DywUC5yzanSHXbvQLfh6yO4QZvh5zhv32aV/w8+5Dsq41
2xdn2CeZZIY7qZ3bNXjGGayHLr3H++sv58BVge/OYPlGswvvx4kptsf3yVzg
zMfAPLz/061b1h3OuUDq9Wh9/P1MN+n+nyYRF5D+UtFbjZ8XzS4UzJIuEPDg
uQLuELZDLP3yLvD30VXJKszGE7ayYqYuMLSXKFyB+ag52R3yGy6wv9jB/QX+
fhL+t1Ap3gUaY9//eY55KP9Xc+xtFwgq47uDO+Hb6ipVmgukCTx/hb8f7Lv2
WZvuuQtYvbp27hl+/+V9cNaucAH5TwpDJZhfdb4Nv1PrAikN5/1xB9H3vDjc
7gKnmFLa8PfJbzlV9ExjLlD1RO1KMWbVjpdnTCZcgKxjUhB34WIJpE1j4+W9
mCnC9+NCHuHEigsUpJEY4W42yoy1WHeBHtsrh3Gzhj7Mztxxgd/SjMOFeL7b
bw+y73cFix+pBrjFFuK/2lC6QlJ3JDPuezTRJHk0rvD1dBTxCWZNw1Ch00yu
IJ8R4I+7fd45iVfAFXxUyisK8PuA2r7QVRhz759Y3NeErJqfXnSF++N/LHFL
BhusCsi6guyDk/S4UzO0Kb2UXKFXCS09xrzRosb+Qt0VgiKPdOF+TiWrLWyE
xRcno3FTn5N29jV3hdY/Kc64XfXEwytsXIHiYb4abq5Hgi/E3F0h0rnjCO7I
Zt6uQG9XqH00vpuPnx8zXJM1Aa4gY6I4iztNgIX+UoQrXHLjqsO9o3P0TGi0
K5Q1pxTgNghggFc3XcGpRSQZd1katfFekitI32uNxE3fREFAKa7w+xPywe05
vS82PN0VMjNLbHG/odjLasl2Bd4PlPq4o7U3BuSeusJa2W0J3DN+3+ejXriC
sH6dAO7LDxf/vq50BSOPkVO4M1/NHqOod4XSvg9MuHeJk+eUm11hkeo5HW4T
8k9Kca9dYWZIiQJ3Fd+oVU+PKzyku/83D+9freHAg4OucOBl7A5ub9++2+rv
XOF0HuMa7rrSO04Xxl1B0TRhGfe+RQPE/MUVKDcI87jVTjMfI51xhaP7q6dw
J1tPrMx/dQVmZr0J3J/Sczv6v7lC/RuJcdynRx0zK9dcIa/Y6j3uKo3vGtd3
XWFZ8tIA7r+x5addSd0gm2H8DW7l9sA/2uRuIGMd34V7TJLk2Ul6N3jdQNKK
e5eHgbqO0w12vMsrcCvYvZvOPuMGSVNqL3HfynxYHyPgBhfbPz/DzXbklJvB
RTcoK5otwO2sPScrJeUGKoV6ebhf3Cxm5rzsBnsGz7Nwy+670LOq6gbe5Cce
4L4pvZ0zquUGLzZYknGPBNUHN+q7wfLXldu4Hb7L8SZYusEZ1u1o3KV8lKS+
dm5waIonEveWQ+8HE2c3mN9hv4o79pN+LI+PG1TpOPrgHjp23Jo20A16Xj51
x82s9/ni5hU3qJYuc8T9tNthvvWGG1yh3jPBvUHG11QU7wbTW1J6uKVgJSXp
thsw3hJTx91fFaBo+dAN1qmMpXEfXZM8qZDpBvtdrorithL4u3k2zw1oZ0wF
cK/mxTz+WeIG1OdlTuA+fOcB2f1mNzhtV7CVi5//veafrrx2gxPet5dx51Nw
VNj2uEHrqwtTuMXCiuyERrD44dJe3MZuda1v5t2AstQlE3emwqfwfXTuYE+l
KoZ73/nr+/UY3UHa9jAPbocTfNF5x91hpzLjGG7+9cCb8lzuwGVGs5ODuTb7
cEq0hDvkUeVV4R75rfqUyt4djhj+4sd9cf6HgJmLOxxkMWDBnTb84MVTT3eI
7M36D7dN0VylerA7xP+mncvGvGIY2XzrljvsMcVk4v6vrPbdoVp3KH38nQ63
e4a1sV2jO8heMNrD/183GEvxsbzNHQqG3i7jTrEymNTvd4fn34/04Oai+bGY
Mu0OIVJXo3HLOJ8hYaH1gKAf8zS4c/UGIt0Oe0DZxed/8f8XHUABBxqYPGBx
If0H7t4j7VQWnB4QxzT1DrdJm9WRLHEPsKPdy8btdzKVj9POA8hLtORwt7JT
eBx39oDQHEsJ3Aycgc/pPDyARS7nHO5SHiOR3QAP6L/YcgL3gtAxmXfxHhD9
2+5nBmbxCzHhb257QGLFwR+4o0W3W1uSPYDh+8xX3FySo0qlmR4QQnVmDLel
XKpOTJkHPDq1Uo+7RIEi+Wq1ByyTHKrE/Vsp8L1vgwcIzNiU4n6gbmRm3eEB
YbU3cnAPGxxzkBj3AOTcF4eb3TjmybkvHqCoJxeF28t0e+H0DLZ+zy9huKmt
Rj0PrXiAUUm0H24l59SgJVJPUE0PssGd4kpRTyT3hEV9CgvcM+6Bf0YPesIz
oUpj3JHeRpHtRzyhp9NVG3dDyLGEDF5PiGvnuoyb6mpM/z1BT/D9ck8at8m1
bfr4C54wSssiiXvr+uj9AGlPkODyvIBbKDE1S0vHE/qVGHlwh92mmFIw9IRL
oee5cPfdCeSSMvOEY6dsOXC7phgVnXHwhITRXyy4H2cdKycN9gTna5sMuDdy
Yja3r3qC7ruHdLhl87cvrkR6QmynGg3uycLRhvEET1BIeUeJm7kstaM82xNo
fd1JcNMWCR6789gTktR89x7h/ZT92smz2BN0ciJ2cS8lrlPyVngC24GyHdwN
LlpqmZ2eIHlX7gduKw6KwdgVT6gr2PmCOz8pYMxCygu+FzHU434QQ8N36bIX
DN1srMGdGJYfwqToBQLCNlW4A9yHWd5qeYFmb8xL3ErKgpbKdl5wxPnWE9yL
f2enhOO9gKxU4B7uc14GyxQfvODWzUAX3DJHB+Y1P3vBdF6uI271V8rT96e8
oJ5qwA6360Gpcc5vXjA3wW+J+60ewwwbKQHmLcj0cNOtbg9dOkoAP1Uzadwp
bRVaX5gIwJxcI4n7ZKp3XyQLAdhtmMVxC8gsdXWzE0BWdlkYt1rCRJPRWQLk
qvWfwR1z5vUzX8DiNuVHcNPuRpw9JkeAqQH3w//GH5ApqlMgQPo9fgbcjwNq
8knVCMDl20SNu639afptAwJokYiS4VZ94Hz8gjEBHG9w7sM97HY69b0pASQZ
jpPgJh7KustqjY1///huOn7/Wd+Ne+pKAJE2nw3c0SJaFFoeBHAteLSGm5aS
+saaFwF2XQZWcbM+vxEu4U+AryNa33Bf+hMU2HmNADvUjXO4WwdFN10jCcDY
ITSLWzV/zYf2BgF+z5RM4zZRc/c0iMfmT2mZxB340MphOpkAnJmWH3H7GOWy
Dz4kwBaRfgy3+5HZjw2ZBDCYnX2P2/qOq25KIQGKmn4O41aJ80cqDQSY03z1
Bre8Us0v0RYCTE7/6cYtc+B35akOAmQ+U+7CLRwRzr87QADeerLXuLn/HMh7
N0YAlnOkrbhZgm8efz5NAMoWjSbc9Jv0SbHfsP2km23ATeadQm67TYDRm+l1
uL8556wzHvSGu/kGVbinZrhdVxi9IXJRrwL3e+uSyc6T3nC8y74Md5NxdV+I
sDcwyQ6U4v4qsi+NR9ob7IOXS3AfYtBwHFHyhpOtNE9xO3ZP7QlYeAO3CDz5
tx+StELEGG9orXmWhVv8qMlu4l1vWFSpycBtu5bXJZnhDRZfa9JxVxZL2CSX
ecND5oxU3OYsDneVPmOWD72Ne2jyT0jrvDcUJ91LxK1YkGInveYNC86vbuI+
f75L5AKFD3QqmcXiLtiyZi1l8AH6wtxo3Ccafh7gPeEDt5p/R+EmVzo7evK8
D3g++R6Be3XIvJBR0QfoVHWv4f5ofiuYyswHxntFruLumG9SJSH4AJsPuoL7
hc8Plq0oH8g0yw3+97w0Kha8b30gfEwpALfHk+xMcw5fSLAh+OMOkOO8xRfg
C1yUOn64w748vrrT4wvOJfneuD/NPPdNXPMFH5avXv/qdbHW5RSzHyx7C3ri
TvveZlV92Q+qZV+4497Z6DNQd/EDfnk/t3/7r6rDNV/lBxK/Z1xx82aNrEWQ
+YNQ/qd/8eXNSK9qY39g+SHjgfu5+vnl5RJ/GHpI8s/ch7wdwn77Q3Hd+L/x
M0dfTNCpBoD3zq1/bs5kIZfKCoBMNtt/JjpECzhvBEBX34F/41enR+qsygXC
TNKOM+7EoTD/oHuBQHH9kQvuRp3FK97EQCjbFnL7f74NIl3PBUE/l+a/8Xr1
lsX2rgeB6Kv9/9ZT+C5y6c6HIBDvvPQvLt5R/CiCJxhWwun/fb+7aljDOyAY
3mw+/Tc+WdHpZ7/fBIM1Z/O/+WXSg6ijOULAIU7xX3xkVFIzwj8EyFf1/+XH
jfHP7dDuEDj3sfvfeFVN2v1vj10B4mjXv/lI3PKpzzpegdiVtH/ePMb580T9
FWi1Vf/nxfacWVr6UEhqFv73/eTJl/3mVqHwq/XDv/mkd1uqi0tDwU/477/1
yNpevu6yGwp066z/4kpdzZpnVK+Cf7XhP2+dc+uKyLwKH9JE/62vIPWI7Me1
q/CL0uPf+FSeOjVJl8OAyMH/b34P+URBxaQwSLx07p/z6b8xcH4NgzWxjn+f
H/+kvvkXXYMLU67/xvsfVggJaA==
             "]]}}}}, {
        ImageSize -> 400, DisplayFunction -> Identity, AspectRatio -> 0.25, 
         Axes -> {True, True}, AxesLabel -> {None, None}, 
         AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
         Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
            FormBox["\"Density\"", TraditionalForm], None}, {
            FormBox["\"Time\"", TraditionalForm], None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], 
         Method -> {
          "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
         PlotRange -> {{0., 499.9999897959184}, {0, All}}, PlotRangeClipping -> 
         True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {0, 
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
        FormBox[
         TemplateBox[{"\"R\"", "\"H\"", "\"F\""}, "SwatchLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2, ",", #3}], "}"}]}], "]"}]& ), Editable -> 
          True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]},
    {
     GraphicsBox[{{}, {}, 
       {RGBColor[0.922526, 0.385626, 0.209179], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1: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
         "]]}},
      AspectRatio->0.25,
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{
         FormBox["\"Trait\"", TraditionalForm], None}, {
         FormBox["\"Time\"", TraditionalForm], None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->400,
      Method->{
       "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
      PlotRange->{{0., 499.9999897959184}, {0, All}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {0, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]},
    {
     GraphicsBox[{{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1: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
8PXjeSsa3L1Ounj58gz0ETwe6tvQIC6+obDDbAZCa5kc021pUNwWtkffZgaW
ny6zj9rRYPr47mGdmzMQMTX77OQNGrA49Z1puT0D9QE1TjoONBBNSc3VDpwB
X6VAggGjz01YpL3OPpuBgvFH2jLONLiF/eutfzkD7Jg3nupCgwi3YhWNFMa6
e4JtMwPnZvhl1GbNwGXlZ/5BrjRo6Fbdpp43Azg6y6nDbgy9tjO5VBXPwFDw
j4/1DIxTa/qBKmaAkN3dc9GdBntuRRwvr5uBq3kir5sYWOHN5QTllhmgJrSJ
HPegge4ffmLpzxl4JrlPM4qBHXYO2Cr1zcC9BieeAQYO0XjVWDw8A4cTD4Xt
ZcylVF8HWcWpGbB9PJmrzcBlb2WjP8zPwJfDxl4ODNw9uLh6ZH0Gsn6jcV8G
Xt3Wd7gLT4ee13dJtxmYKQNZxpDpMGwrUPf/eB6UGnmZmQ47Ug7LnWfg/d3k
Oh42OnCmzpwSYmA5D7uVDnY6OLq8Iwwy6oHt3ySjuOhw/Wu/XTQDa2VKmenz
0qHt4DZvJQY2Ug0P38lPB63qjiMtjPPa9c5Vte+lww1fwkt9Bvb0NFh4KkIH
82mn7K8MvgLZi8V1xelgYcflIMvAT1/zGbFL0uHjILU7hMF3grpfaIs0HcLI
PkutDD2y+/6UhcnR4SRfUS0zA3/yUp3VVqCDF4f46SMMPes500XYlOjA4aPt
o+1Eg8HT9iGPVBj1dhuQ9Bl+oPc3fjp7ig7x/fWmiOGXTZ/DU8xn6GBqz+Um
YM/w79t53RAdOhwmB33PYvjtwJnLgRr6dDh3brfoFYYfjw5+LKQY0qHC1Vxp
xZoGOrv+23PfnA5+j1k/bbNk+Dnvr7a6FR20mUsl/Bl+dzinfodoS4cEy7e2
f81oEPwf8/BdJzosSOw18jFm6Df6LNffjw5dP0+5LurRoPHuYr/yXTqwfLj1
ekaXBl17ruzcCKRDJ5NkY9cFGsxfEPTyDaXDqJLirzuM/pUszlTxiqWD//Lb
AD5VGmi07Y0NSaSDSdzdHGuggdV49HxMKh1GlPKw+JM0iOW//+rjGzoUNbS+
6WLMj213r7KtldBBxjHZ7M5BGoi//GWzrYIOM8N0O0ycBmoFFyr21NDBlimZ
dYIxn3yHld1PNtLhG7p0kl2AMd/O8HX59dJhvFGP5dF2GlCtnsqF9dMh1nn8
TRkLDURuM4UmDNHhNPf4vr8UGhjnLmLlk3SQO/wtb25zDL5xfk/DbdBhoPU8
nJkegzc9j1zuCcxC9sW5yW8NY1A3T/j6THgWGl1icbM1YzDI5iOSJjoLimwL
vuSKMdiD7H7WSM1CWM50+/qHMXiUpn6Sgs3CV1q6hFjyGNxw3KA+MJuFVycU
9jl6jIHkllNiWOIsVFClVvfuGAPWvN7MK6mz4N1xKuAz0xhMW57N3/9qFoSO
CIxpE8bg3RfR2k+5s7DouOijsTAK8mG94yOfZ+F4hTsxsXsUTgqcVYDeWeAy
kOIaTxkF7ROiTTO8c9DAajmkcXAUpKcifn7inwOrdLl+w32jwJ6I678vNAcJ
2r/Om/GNQjuhd27PgTnIYmUqPc0yyvh/RfBqKs5BrLqu6RPaCJhdwVknGcxB
vLjaQdaMEXC+1bOqEzEHMb4FTny7GOuZppKO0XNw9afn1na2ETjf9cf4wcs5
ePXptOQyYQQOnRgqrUyZA/6dLqmZ08MwvjnpL1cwB7uPrKoH1g6DTdAmgevH
HPR3NM0rug6DSZTwtk7uf5B4pHNMqHIINAts95i++AcnJBT7n2sMwp2MKrHE
2HnQ3iS3se7vh/Wv1Ycfhy5Am/9o5bFz3cBWMLRR83QRJM98+Xfo4A9wa9n5
ODJqESTaMoaCuH7ArwlVfusXi7DU5hg3sfkdUvYnKxGTF0FOIze+4/t3OBZt
ekvl3SIQJCcfSPl/B0vvn/TPzYvwh/Qpc+VHOxRD/WDhtiXG/SPRz+JRG1g2
vmnIvL8ELB6Sl0pPNEO6SJDMtQdLwPd9slZnVzOM+Vg8F368BAaj6SJbc03g
KMF97WXkEiSdUe7Ket0EXkH+uNDUJZBQuuJ6bE8TPEG6is6VS5C7+SpPDd8I
pe8X045uLIGhaai07t8G2NrWtm0OtwxhM9q6ChUNoGr1xi2XtAyL2IqbQmID
1HFYIHHWZdB8ofQl2LQB2p0aenj3LAOmVS7m3FMPtANxnOvHluFKieOcXm8d
8MSr3KnyWAatD6PcgXO1YOsus73VaxnYtG3Mz7bXQvGZvXG/by/DQa/0HJn8
WjBaXC9aDlwG/qxzOqZutZB4oXhGOmoZFnRu2irM18ABwmHz2A/LMBDy8tfQ
RjUo2fJjHovL0JuceGK7RBU8Ut7WeHd1GZT/w9IaWaugd+fqlSeby3Buv6Pp
a3ol+Fd03nxNWYF3l1TiqosroXr3s5x+nhXYbsR60uFsJWg1MgtoK66AHIl3
MNS9Asxll9ZEvVagQTP3iNvHz+CZ1Ht82ncF7tTph3c9+gyhO6puFf63Anr/
sjo8zD5D8VTov9PBK8Dn6vXxNOkzsL/eN2EbvQIVZuVyBhdLoWrf+e6s9yvw
J8wxgbL8CcS40oulZlfAlkJT27QrhpP3Hi4uzK9A6rvrLW9ViuHinLN82fIK
cJ+b+vWUrxj+a1V6dx63Cr9w0ZMjjUXwK7T1lfOOVeAI2ihpO1IED8nr0XlS
q7B7/97sMJZCmFq8ePOo/SqwE4O0a7oLgHNYq/u80yrwxuLyfAsLQOH7abBz
W4WCBKFTthEFcOetEnOszyoc9nms032WEW+3Lx73aBVydveLSpblg0LXbM23
N6tQs6t5WSc3D/xLwrksp1ZBcSBLZtDmLaRkPfT2nV2FndEff707+Bbqngf2
RS6swuyQQHTPdC6we3hl1m2sQtTGyu/TXrmQcsjipNT2Nai5ucvb/kkOfIk/
bL0svQbiso/NIpvfwI47zQVhLmtQR6paGHqcCZxZ7vRIjzXorh0/GGSaCVzt
vFKxXmuwomrZfVMqE3j3W2W8urMGJ1MvaUDzKxCqX4qpCF8DhwNNH1x2vgIZ
dmH/uXdrEO+ruobLTgedJHfNS7NrcLoxmdljZypcbOC9b7KwBkVskpNKkymg
P/e50nJlDa4zc9udqk0BQ3WmE874dbC8rdkp4pUCFmNxUiEc6+Dj0nFmoz8Z
XGS+cH6SXYcU9un8X2VJ8LSC97eA2zrk9nnGderGg2HA+4a+m+swIv7ym/Ku
eBBS1ylM9F4HKvu7dOrvOMitC34ifHcdsjlaDWqux8HX5kUV0fB1MDY8GvU9
OBYIv39kHMpdhybnIN7ujhfgsRLucmJ8HcJk39L5C6PhRMkh0/WpdfAUs9Im
BUcDwa/+zOfZdbAp2NUKhtEQjsOJwMo6cCvdcspbi4IcqnOHKtMG/BEIknc7
HQUj3NpKZ8U2YBcxTIs08QwuyzGTrlhuQMpv32ldx6dwyP3jrhs2G/BU0/3j
R/WnQHh/XdLPfgP0Y3TG3PmfQvbRrxeT3Tbg3J02g9+N4UA4/iiZFrAB/Lhb
327KhkMusIFP6gaDD42kZ5xhEHjn88XQVxvwgafb/ci3x3Cl0tEm4c0G9HFW
v7MNfAwktebHVQUbMD7H4flgORSunH7Sy1KzAc9Fy7qiRx8BSZvDJ3ZoA+4d
WmMl9D+A7seVj3PGNuBY5M8Yj+QH8LbZNbl8cgPk1PjOO1g9ACOd9vrB+Q3I
7xQNHR0LgXd6z3YdIm/CzBPe5X8rwWBsxP2hVHQTPCNpmvFHgiDfdjf9t80m
jLh5b8huBYCWSkXBa/tN+PrX6lhFewCM8tneuuW0Cf7CG32vMwKAv/n9Jrvn
JhQ87x6NuBAAQfI6bOr3N6EK7Czj0u+CET744OvUTXhVA7e2Wd6B+W6pac9X
m0AWMQSeE3fgyfsfeWpvNmEq8nuBO9cdqLHdd/x3/ibcm7gXpxn+H0g3f9Zg
r9oEifT5SzE2/kCInbf27N+Eo9q7zV1kbkOcR+wBtaFNGBQoENKb9AXF86qT
O8Y2QfNTtF5Dpi844MPds2Y24aLl04YbIr7w01YyoHeTkY/w2/XGXh94LW+Z
qCqwBezuZwKcZL1At7mla7vRFpj3FNc/L/SA+gHhm/WmW8CS0HFl6Z4HoCV3
9oCrW/BDmDvsi64HyAjxaizYMfaLNj98N+0O7G4W73tubUGo71hdrJQ7tHLP
hmVGbcHa+E/innJX0DyodtDyxRZUdq1c2/nMFSqwqNo98VtQLRH/ysnWFd7Z
Hl8PS9uC2ne21Wc5XCH8493rNwu2oC6E7Bl43QV0TDnVVdu2YKWYqff9JSeo
d7X+s/ZjC1C42A5dFidAQYU+H35tAevWxYHYMkeQeWuUd6CfUc/z/FlFCUdg
x6cK7pjZguZHv2asKA5g1/5i3ZGCQ6LGLAHWf67DAc+DnUr7cUg9R/eOCtEG
JspNjyExHPro2nzXovYa5DI/fXHqAA45GBoZC4ZcA/n4JWOdQzhEn9L957Lj
GqjU1PRfk8chIs6y46yoNRhxmo+Hq+NQ1J0dSykOliBgEnEu+jQO2XToN207
Zgn96bXZsZo49OyIgeAm0RJsjh9yztDCoaKfJ+R84q+Cu8XKvxJ9HHL+l1GY
89MCQnOfbYxY49C370veU5VmcGH5i9mkDQ496D842GhnBpyqq+Wzdjjkl8rh
+4LdDGI6LALWHXAo0avWdtbSFNLXpaicN3FIwmrgnjmnCZSdrWdXvo9D9+nc
z01fXoHZkXWRZ+k4tFCTHERSMQAeP8nfN1/hUI7xcnQr2QBO7jSKNszCIb6j
Cn3y3/QhBIqYBHNwaJjV80nFZX0QjHGdynyPQ5EO3x+U3dIDrTMjhWXVOOT4
N26fdLsuuP3hckmuxSETKTdKX6IuPL+pJhFYh0OcBwt0OZx0YSA5KfbMNxz6
4JZ7amObLnivGt350Y5DTMdcVRq0dSDjTcuZ8b8M/mq6pk1ataFRZZPQNIhD
cdOaq+y+2jDXeaj07TAOzaukqbwS0wZl0kPpmzQcEir1Jrrd0YIfJuo7cbOM
70d9aziFnQP89o+93Dg8OjnL5yb0VxPE0kajlvF4NCs1fJrwQhO0lHgu9BDx
KLVs+4UMXU2IsXGvTKLiUffEg4dStRogXS6VIbkDj5b+9t0nfzgNJi4pziqC
eBQ+tiZ+oVAdmE8bl2oJ4ZGfRoCcnYc6FO7hYjbch0c/1did1Y+oA3vd/RQn
MTy6tf8iwgrUoFrgekesNB5pudelb5aowsFvh08sYnjUK7BxcWMaQWfSWDBe
BY+ao7uVTYoRBHom/2BVwyPPI4mPzQMQ/Bbe6SSigUePvk1qavEiCPdaTNK5
gEd13MrH9zzHYEn0M+WNOR7ZR4kS3eJOQNraTb3Cq3j0SfdurKjqCdBpk06q
tMKj273W8lNjSvD6dtLxX7Z4NPr59fns40pg9v2eA9kFj65/lhd8PnoMau6c
bTe/g0eSatYSiW4K4HqJuPdGAB5Vc6qfUDygAIKHSm94BuKRr9Ee5cK+o+DV
KUV+HIJHTdXsVWbnj4KkNMexT+F49Hi+jn/nMXmI6OmM50rGI77Z4pAxOTlI
2XikupGCR16XfQ42r8hC3l40OpyGRyVuIr+NK2Wh1SpTpigTjwbFL+nZXZQF
tkmv6ivv8Gj+0tBDrtsyELK+m5ZQjkf4o9nZd35JQYxg8+PgSgYfrw/9LPCW
glcoQM6lGo8mayZG8fxS8CVw3FelDo94RjLDB6wOAZGtZPtQMx5d0DM9bomT
BH8BE3mJPjzymJY/13H9AIQBexdHPx6NWGRYGu45APFXa/xW/zLyy6ZP1DeJ
Q2n6obpvw3j0YXxy3PaoOKxIbVxxmsKjKKd/ypd2iIEHlvBfwToeDWRs02me
EIFAi4v74zbxaCuZq2XjtQg8C6A0BOII6DEzkXneXgTyvzhxXiIRkJhneIfk
1D6YOQ/py9sIKG3X64Ohq8Jgb97/VXkPAa1GSHaeVBSCMUH7Hn4BAoqJ4kwa
IgiBTd+/iTVBAkq5XFN2OWEvWJpS2T7tIyDcF6WrIt8FwdhY+oLCQQJSsaNf
5DonAFqXb3+XPk5AwdG1391c+eArD2WI7QQBueW3/Nyzhw80fz6ZnzxJQEEr
p9VaaneDukEq9xtEQKqtSmZnBHeDst7Xy+KaBOSscN//WM8ukL7A27v3MgFV
PhlLfBjADdnbUyY3DQmorEjib8AJbjjYLLnx24iA3hyr4rmywAWMFhaMMyOg
hpxLEHWDC/aes7HgtSEgZrsP+6mWO4Fd4/0Q+00C2o2baCnx4IAwCrYw40lA
foVSpq5KHMD6pY7c4kVA0+cSL//BcQDTqR6xx7cZ+19Nbut9wg44NcJ15kAC
4v87sXHCYQfMYjpT+GeM9R9dNLI6KywqWz9ljiKgkh9DzE96t8H6Sa+jHM8J
yD9P6OZ/ntuAciLJTyiWgMTfL4zey2UBfkU6G6Qy6i2YNEqQZobTh8OlbxcQ
UHTgYrvpDQqck05rv/eBgI6pNCro8VJAR6rY81ERAV0L/FLv8IUMxpL9ZS9L
GPwNdVtuiJLBRVzmwsdqApqwCbSRmiPCy72tzovfCQgfKjLwvgQPiYJDOzc7
CChMiYBH3nhIE1guIv8ioM2x0M0iRTy83SOE4+4loL9sytKWRTjGPd4l/MgQ
Acl0vrkQFbCFTe9gz3OZJ6AvtY+DG1bWsH/b9xt4LRJQQVyC/Kcna9gy27GV
/5YJSOqzaZWE+BpGZLVQebJOQP25ShKuRqsYL9O7thwSEW2J65zhaV/G1HA6
c+NcRPQwht4QhV/EXp8zn27hIaK0Ff3vDfkLGOdzp/H3vEQ05+3TznJtARuQ
ejzgz09Ex+sED2Y0zmMBxl/bOfcT0ba0e+XDr/5hFYXqBUpHiIiteSmn5tEs
doCg/3bvUUZ+W7XY01qzWLi21RuSIhGlNzXVpbLNYuZDd1OblYho2g/LH4qg
Y5sc5c8sVYlI8yF1yO78DKbseNzjoS4RnTozdT2YNoGlFWu6OOsR0cmfYdtu
3ZvAWEmGDvoGRHTjS4PkN8EJrPelp7XgFSIKiQy9G3ZlHLtdX6Cfb0FE5qXK
rcQ/Y9gnEemj3c5EdLRT22xMdATb56wsW+5KRHZCXwO5fgxjDz9pSaW5E5GU
TcSnq/eGsSu6N0SdbhFRG4f9MZ3hIWzZP5Ob8B8RIXGTizyFg5hi975FiTAi
uiIbwnkk5C8mdq30vmI4EUXW9rXpqfzFuOgG3KciiCjMfLg2aK0fmyM/kLeI
JiL7jx+idrr3Y7myM27RCURkw7UeU9Lbh8WXhhDSkojo7s78sDPmfVioxr6I
vBQiIvCk1ZcP/sbsTQ3yGjOIKPON/R/NuV5M7EHJDOEtER1qMmpgE+3BuLkM
/mPPI6KeqhcWAoXdGClxertgAREVRpy48kezGxt4Lyx9vIiIFpUvK1x178IS
+oMdnMuJKPFq3PC7nk6M55g+raeFiCj7bR7azv/AyNVTXrQ2IvLMj6z9Ef8D
m9cOZlr6TkRlple2YjR/YO1Wn8Q5fxFRUe1eVc6U71jYEyEbzX6Gv+7Xvses
2zE/vk8LBgNE9Pg1nbN7VzvmkK5332qIwb8K7U96Yxt2tiQozX+MiOS5aBWl
x9swyujkwHs6ERkfkNpwEG7FFlyD3KrmiGgn79BN4dIWbGh9L6F1nsGHpTY9
ULEFq+LUE55YJiKD3juF/8k3Y/7YR3NhPAmZJLa8vn66EVuIut/7mIOErs1s
cD6rrsculs13Pt1JQrxUgvg/k3rs3YjV9yhuEtJQaWmcWKrDHBRVv8bvJqHB
sL8vwuTqsIFfm0U5wiSkqKX2cOFjLYbwTgV5IiTkaef3x8O8FkuQ+J37QZSE
1jo+hZhRarErPiXpnyVISKJ4DjM2rMFa93g9a5IlIfEf8Tq2rNWYtPpoWNsR
ElqqrWhOL63CQh0uPew4SkKh22hXRZ2qMI3P8nd/Hyeh7JDAoB8/KrEys1mn
KRUS0tyy/uH8rgLLTrY/y3aRhFyO9V51P/4ZY/nadYpDn4R+Wip87vhcitnN
aapwXyKhLEUd1cPqpZiImvgxASNGfXmfUdalEuzl0KColCUJiUhfcqU9/Ygt
s+oJy1qT0LvDannyoh+xS0er+I/akNCNr84/T34qxjiCknYq25OQgULMKzta
ERYiborXdiOhz5EyNTeNC7GRC43rOh4k5Hr/+M/ptQ+YuteJZX1PEoq/urxB
j/+AbdXvnjHxIaGpOtYbXiPvMU/7n70OASR0/Lhw9kxIAWaVc6E4NIKEUl6H
fknfnoft3/dpm1MkCTmfiuacbXiHDUXvN78QTUJvEiK5NYLeYdZ3VsicL0lI
VMWtnkh4h13TS9V7nkxCZ4W+i+ew5GJi9WyvvFIZ9ZckNe15moONnPRavZLO
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

         "]]}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{
         FormBox["\"Starvation Rate\"", TraditionalForm], None}, {
         FormBox["\"Xbar\"", TraditionalForm], None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      Method->{
       "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
      PlotRange->{{0., 2.99999993877551}, {0, 0.8}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.675511352005495*^9, 3.675511394130554*^9, 3.675511429585075*^9, {
   3.675511461742841*^9, 3.6755114694153233`*^9}, {3.675511501091189*^9, 
   3.6755115982044277`*^9}, {3.6755116442853518`*^9, 3.67551165122901*^9}, {
   3.675511702972393*^9, 3.675511752102221*^9}, {3.6755118153983994`*^9, 
   3.675511845797947*^9}, 3.675511893428331*^9, {3.675511930282228*^9, 
   3.675511997740794*^9}, 3.6755120512438602`*^9, 3.675512105187459*^9, {
   3.675512154591414*^9, 3.675512197717115*^9}, {3.675512232333856*^9, 
   3.675512244300929*^9}, 3.675513969942252*^9, {3.675514148603724*^9, 
   3.675514246525077*^9}, {3.6755143089817533`*^9, 3.67551431924083*^9}, 
   3.6755143969984083`*^9, 3.675514789912157*^9, 3.675514821585133*^9, {
   3.675515194472026*^9, 3.6755152029995937`*^9}, {3.675515279076885*^9, 
   3.675515300059477*^9}, {3.67551534700408*^9, 3.675515450869597*^9}, 
   3.6755155049675627`*^9, {3.675515548027355*^9, 3.675515561000193*^9}, {
   3.675517223886216*^9, 3.675517335174295*^9}, {3.675517665559898*^9, 
   3.6755177131701*^9}, {3.675521286488344*^9, 3.6755213187839727`*^9}, {
   3.6755245057173443`*^9, 3.6755245235030527`*^9}, {3.67552515505941*^9, 
   3.675525165353211*^9}, {3.675525211798356*^9, 3.675525228089341*^9}, 
   3.675526266776946*^9, {3.6755267134811773`*^9, 3.6755268132662354`*^9}, {
   3.675527618328412*^9, 3.675527641250296*^9}, {3.675527673361412*^9, 
   3.675527744994343*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6755116702222443`*^9, 3.675511696390209*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MetapopDyn", "[", 
     RowBox[{
     "\[Alpha]_", ",", "\[Lambda]_", ",", "\[Beta]_", ",", "\[Mu]_", ",", 
      "T_", ",", "\[IndentingNewLine]", "sigmax_", ",", "slopex_", ",", 
      "varx_", ",", "\[Theta]x_", ",", "varGx_", ",", "\[IndentingNewLine]", 
      "sigmay_", ",", "slopey_", ",", "vary_", ",", "\[Theta]y_", ",", 
      "varGy_"}], "]"}], " ", ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"sigma", "=", " ", 
        RowBox[{
         FractionBox[
          RowBox[{"sigmax", "*", "slope"}], 
          SqrtBox[
           RowBox[{"var", "+", 
            RowBox[{"slope", "^", "2"}]}]]], "*", 
         RowBox[{"Exp", "[", 
          FractionBox[
           RowBox[{"-", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]"}], ")"}], "^",
              "2"}]}], 
           RowBox[{"2", "*", 
            RowBox[{"(", 
             RowBox[{"var", "+", 
              RowBox[{"slope", "^", "2"}]}], ")"}]}]], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Wbar", " ", "=", " ", 
        RowBox[{"\[Lambda]", "+", 
         RowBox[{"sigma", " ", "*", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{"F", "[", "t", "]"}], 
             RowBox[{"H", "[", "t", "]"}]], "-", "1"}], ")"}]}], "+", 
         RowBox[{"\[Rho]", "*", 
          RowBox[{"R", "[", "t", "]"}], "*", 
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{"H", "[", "t", "]"}], 
             RowBox[{"F", "[", "t", "]"}]], "-", 
            RowBox[{"R", "[", "t", "]"}]}], ")"}]}], "-", " ", "\[Mu]"}]}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"F", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{"\[Lambda]", "*", 
            RowBox[{"F", "[", "t", "]"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmax", "*", "slopex"}], 
               SqrtBox[
                RowBox[{"varx", "+", 
                 RowBox[{"slopex", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]x"}], 
                   ")"}], "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"varx", "+", 
                   RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
            RowBox[{"F", "[", "t", "]"}]}], " ", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmay", "*", "slopey"}], 
               SqrtBox[
                RowBox[{"vary", "+", 
                 RowBox[{"slopey", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"ybar", "[", "t", "]"}], "-", "\[Theta]y"}], 
                   ")"}], "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"vary", "+", 
                   RowBox[{"slopey", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", " ", 
            RowBox[{"R", "[", "t", "]"}], " ", "*", " ", 
            RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"H", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmax", "*", "slopex"}], 
               SqrtBox[
                RowBox[{"varx", "+", 
                 RowBox[{"slopex", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]x"}], 
                   ")"}], "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"varx", "+", 
                   RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
            RowBox[{"F", "[", "t", "]"}]}], " ", "-", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               RowBox[{"sigmay", "*", "slopey"}], 
               SqrtBox[
                RowBox[{"vary", "+", 
                 RowBox[{"slopey", "^", "2"}]}]]], "*", 
              RowBox[{"Exp", "[", 
               FractionBox[
                RowBox[{"-", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"ybar", "[", "t", "]"}], "-", "\[Theta]y"}], 
                   ")"}], "^", "2"}]}], 
                RowBox[{"2", "*", 
                 RowBox[{"(", 
                  RowBox[{"vary", "+", 
                   RowBox[{"slopey", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
            "*", " ", 
            RowBox[{"R", "[", "t", "]"}], "*", 
            RowBox[{"H", "[", "t", "]"}]}], " ", "-", " ", 
           RowBox[{"\[Mu]", "*", 
            RowBox[{"H", "[", "t", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"R", "'"}], "[", "t", "]"}], " ", "\[Equal]", 
          RowBox[{
           RowBox[{"\[Alpha]", "*", 
            RowBox[{"R", "[", "t", "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"\[Rho]", "*", 
               RowBox[{"H", "[", "t", "]"}]}], " ", "+", " ", 
              RowBox[{"\[Beta]", "*", 
               RowBox[{"F", "[", "t", "]"}]}]}], ")"}], "*", 
            RowBox[{"R", "[", "t", "]"}]}]}]}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"xbar", "'"}], "[", "t", "]"}], " ", "==", 
          RowBox[{"varGx", "*", 
           RowBox[{"D", "[", " ", 
            RowBox[{
             RowBox[{"\[Lambda]", "+", 
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 FractionBox[
                  RowBox[{"sigmax", "*", "slopex"}], 
                  SqrtBox[
                   RowBox[{"varx", "+", 
                    RowBox[{"slopex", "^", "2"}]}]]], "*", 
                 RowBox[{"Exp", "[", 
                  FractionBox[
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]x"}], 
                    ")"}], "^", "2"}]}], 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"varx", "+", 
                    RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], " ", 
                ")"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"F", "[", "t", "]"}], 
                  RowBox[{"H", "[", "t", "]"}]], "-", "1"}], ")"}]}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"sigmay", "*", "slopey"}], 
                  SqrtBox[
                   RowBox[{"vary", "+", 
                    RowBox[{"slopey", "^", "2"}]}]]], "*", 
                 RowBox[{"Exp", "[", 
                  FractionBox[
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ybar", "[", "t", "]"}], "-", "\[Theta]y"}], 
                    ")"}], "^", "2"}]}], 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"vary", "+", 
                    RowBox[{"slopey", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
               "*", 
               RowBox[{"R", "[", "t", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"H", "[", "t", "]"}], 
                  RowBox[{"F", "[", "t", "]"}]], "-", 
                 RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", " ", 
              "\[Mu]"}], ",", 
             RowBox[{"xbar", "[", "t", "]"}]}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ybar", "'"}], "[", "t", "]"}], " ", "\[Equal]", " ", 
          RowBox[{"varGy", "*", 
           RowBox[{"D", "[", " ", 
            RowBox[{
             RowBox[{"\[Lambda]", "+", 
              RowBox[{
               RowBox[{"(", " ", 
                RowBox[{
                 FractionBox[
                  RowBox[{"sigmax", "*", "slopex"}], 
                  SqrtBox[
                   RowBox[{"varx", "+", 
                    RowBox[{"slopex", "^", "2"}]}]]], "*", 
                 RowBox[{"Exp", "[", 
                  FractionBox[
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"xbar", "[", "t", "]"}], "-", "\[Theta]x"}], 
                    ")"}], "^", "2"}]}], 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"varx", "+", 
                    RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], " ", 
                ")"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"R", "[", "t", "]"}]}], ")"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"F", "[", "t", "]"}], 
                  RowBox[{"H", "[", "t", "]"}]], "-", "1"}], ")"}]}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"sigmay", "*", "slopey"}], 
                  SqrtBox[
                   RowBox[{"vary", "+", 
                    RowBox[{"slopey", "^", "2"}]}]]], "*", 
                 RowBox[{"Exp", "[", 
                  FractionBox[
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"ybar", "[", "t", "]"}], "-", "\[Theta]y"}], 
                    ")"}], "^", "2"}]}], 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"vary", "+", 
                    RowBox[{"slopey", "^", "2"}]}], ")"}]}]], "]"}]}], ")"}], 
               "*", 
               RowBox[{"R", "[", "t", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{
                 FractionBox[
                  RowBox[{"H", "[", "t", "]"}], 
                  RowBox[{"F", "[", "t", "]"}]], "-", 
                 RowBox[{"R", "[", "t", "]"}]}], ")"}]}], " ", "-", " ", 
              "\[Mu]"}], ",", 
             RowBox[{"ybar", "[", "t", "]"}]}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"F", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"H", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"R", "[", "0", "]"}], "\[Equal]", "0.16"}], ",", 
         RowBox[{
          RowBox[{"xbar", "[", "0", "]"}], "\[Equal]", "0.8"}], ",", 
         RowBox[{
          RowBox[{"ybar", "[", "0", "]"}], "\[Equal]", "0.2"}]}], "}"}], ",", 
       
       RowBox[{"{", 
        RowBox[{"F", ",", "H", ",", "R", ",", "xbar", ",", "ybar"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
       RowBox[{"MaxSteps", "\[Rule]", "Infinity"}], ",", 
       RowBox[{"InterpolationOrder", "\[Rule]", "All"}]}], "]"}], ")"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "=", "0.5"}], ",", 
     RowBox[{"\[Lambda]", "=", "0.2"}], ",", 
     RowBox[{"\[Beta]", "=", "0.2"}], ",", 
     RowBox[{"\[Mu]", "=", "0.3"}], ",", 
     RowBox[{"T", "=", "200"}], ",", "\[IndentingNewLine]", 
     RowBox[{"sigmax", "=", "0.8"}], ",", 
     RowBox[{"slopex", "=", "0.1"}], ",", 
     RowBox[{"varx", "=", "0.001"}], ",", 
     RowBox[{"\[Theta]x", "=", "1"}], ",", 
     RowBox[{"varGx", "=", "0.1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"sigmay", "=", "0.8"}], ",", 
     RowBox[{"slopey", "=", "0.1"}], ",", 
     RowBox[{"vary", "=", "0.01"}], ",", 
     RowBox[{"\[Theta]y", "=", "1"}], ",", 
     RowBox[{"varGy", "=", "0.1"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Traj", "=", 
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", "t", "]"}], ",", 
         RowBox[{"H", "[", "t", "]"}], ",", 
         RowBox[{"F", "[", "t", "]"}], ",", 
         RowBox[{"xbar", "[", "t", "]"}], ",", 
         RowBox[{"ybar", "[", "t", "]"}]}], "}"}], "/.", 
       RowBox[{"MetapopDyn", "[", 
        RowBox[{
        "\[Alpha]", ",", "\[Lambda]", ",", "\[Beta]", ",", "\[Mu]", ",", "T", 
         ",", "\[IndentingNewLine]", "sigmax", ",", "slopex", ",", "varx", 
         ",", "\[Theta]x", ",", "varGx", ",", "\[IndentingNewLine]", "sigmay",
          ",", "slopey", ",", "vary", ",", "\[Theta]y", ",", "varGy"}], 
        "]"}]}], " ", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Legended", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Table", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Plot", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Traj", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
               RowBox[{"PlotRange", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "All"}], "}"}]}], ",", 
               RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
               RowBox[{"Frame", "\[Rule]", "True"}], ",", 
               RowBox[{"FrameLabel", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\"\<Time\>\"", ",", "\"\<Density\>\""}], "}"}]}], 
               ",", 
               RowBox[{"PlotStyle", "\[Rule]", 
                RowBox[{"ColorData", "[", 
                 RowBox[{"97", ",", "i"}], "]"}]}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "400"}]}], "\[IndentingNewLine]", 
          "]"}], ",", 
         RowBox[{"SwatchLegend", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "1"}], "]"}], ",", 
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "2"}], "]"}], ",", 
             RowBox[{"ColorData", "[", 
              RowBox[{"97", ",", "3"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<R\>\"", ",", "\"\<H\>\"", ",", "\"\<F\>\""}], 
            "}"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Traj", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "4", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "All"}], "}"}]}], ",", 
           RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<Time\>\"", ",", "\"\<Trait\>\""}], "}"}]}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"ColorData", "[", 
             RowBox[{"97", ",", "4"}], "]"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], ","}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"sigmax", "*", "slopex"}], 
             SqrtBox[
              RowBox[{"varx", "+", 
               RowBox[{"slopex", "^", "2"}]}]]], "*", 
            RowBox[{"Exp", "[", 
             FractionBox[
              RowBox[{"-", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Traj", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                   RowBox[{"[", "4", "]"}], "]"}], "-", "\[Theta]x"}], ")"}], 
                "^", "2"}]}], 
              RowBox[{"2", "*", 
               RowBox[{"(", 
                RowBox[{"varx", "+", 
                 RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], ",", 
           RowBox[{
            FractionBox[
             RowBox[{"sigmay", "*", "slopey"}], 
             SqrtBox[
              RowBox[{"vary", "+", 
               RowBox[{"slopey", "^", "2"}]}]]], "*", 
            RowBox[{"Exp", "[", 
             FractionBox[
              RowBox[{"-", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Traj", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                   RowBox[{"[", "5", "]"}], "]"}], "-", "\[Theta]y"}], ")"}], 
                "^", "2"}]}], 
              RowBox[{"2", "*", 
               RowBox[{"(", 
                RowBox[{"vary", "+", 
                 RowBox[{"slopey", "^", "2"}]}], ")"}]}]], "]"}]}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "T"}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "All"}], "}"}]}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", "0.25"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Time\>\"", ",", "\"\<Trait\>\""}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"ColorData", "[", 
             RowBox[{"97", ",", "4"}], "]"}], ",", 
            RowBox[{"ColorData", "[", 
             RowBox[{"97", ",", "5"}], "]"}]}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{"sigmax", "*", "slopex"}], 
           SqrtBox[
            RowBox[{"varx", "+", 
             RowBox[{"slopex", "^", "2"}]}]]], "*", 
          RowBox[{"Exp", "[", 
           FractionBox[
            RowBox[{"-", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"xbar", "-", "\[Theta]x"}], ")"}], "^", "2"}]}], 
            RowBox[{"2", "*", 
             RowBox[{"(", 
              RowBox[{"varx", "+", 
               RowBox[{"slopex", "^", "2"}]}], ")"}]}]], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"xbar", ",", "0", ",", "3"}], "}"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Xbar\>\"", ",", "\"\<Starvation Rate\>\""}], "}"}]}], 
         ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "sigmax"}], "}"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.675510406553512*^9, 3.675510750440186*^9}, {
   3.675510798823468*^9, 3.67551087298641*^9}, 3.675510930106698*^9, {
   3.67551096131392*^9, 3.675510970706945*^9}, {3.67551101115549*^9, 
   3.675511216352687*^9}, {3.675511250792829*^9, 3.675511468768923*^9}, {
   3.67551150013801*^9, 3.6755115970536327`*^9}, {3.675511643452642*^9, 
   3.675511650019848*^9}, {3.675511698090906*^9, 3.675511751817554*^9}, {
   3.675511790184196*^9, 3.675511892620276*^9}, {3.675511928765258*^9, 
   3.675511997088962*^9}, 3.675512049291587*^9, 3.675512104232456*^9, {
   3.675512153724985*^9, 3.6755121971547832`*^9}, {3.675512231643217*^9, 
   3.67551224368221*^9}, {3.6755139560651484`*^9, 3.675513967518579*^9}, {
   3.675514147810644*^9, 3.675514245582481*^9}, {3.675514308509405*^9, 
   3.675514318262227*^9}, {3.675514350596039*^9, 3.675514394033372*^9}, {
   3.675514780098503*^9, 3.675514786329472*^9}, {3.675514820519312*^9, 
   3.675514820807386*^9}, {3.6755151933986387`*^9, 3.675515202268057*^9}, {
   3.675515278411462*^9, 3.675515298929015*^9}, {3.6755153449857597`*^9, 
   3.675515449861429*^9}, 3.675515504012631*^9, {3.675515547195858*^9, 
   3.675515560355579*^9}, {3.675517202432406*^9, 3.67551733444901*^9}, {
   3.675517646730052*^9, 3.6755177125275383`*^9}, {3.6755212676570473`*^9, 
   3.675521276107579*^9}, {3.675521307127954*^9, 3.675521316750708*^9}, {
   3.6755244987446404`*^9, 3.675524522966372*^9}, {3.675525154606062*^9, 
   3.675525164835703*^9}, {3.6755252106523*^9, 3.675525227334322*^9}, {
   3.675525276106056*^9, 3.675525669850403*^9}, 3.675525818711363*^9, {
   3.675525913910784*^9, 3.675525942767955*^9}, {3.675526187880189*^9, 
   3.6755262383469*^9}, {3.6755263222292747`*^9, 3.675526360921843*^9}, {
   3.67552650366702*^9, 3.675526508930984*^9}, {3.675526649477388*^9, 
   3.675526651868464*^9}, {3.675526688387249*^9, 3.675526700441759*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NDSolve", "::", "ndnum"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Encountered non-numerical value for a derivative at \
\[NoBreak]\\!\\(t\\)\[NoBreak] == \[NoBreak]\\!\\(0.`\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NDSolve/ndnum\\\", \
ButtonNote -> \\\"NDSolve::ndnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690157851*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\({\\(NDSolve[\\(\\(\\(\\({\\(\\(\\(\\(\\(\\(\\*\
SuperscriptBox[\\\"F\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, None]]\\)\
\\)[t]\\)\\) \[Equal] \\(\\(\\(\\(0.2`\\\\ \\(\\(F[t]\\)\\)\\)\\) - \
\\(\\(0.7627700713964738`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(F[t]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\[LeftSkeleton] 2 \
\[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) + \\(\\(0.565685424949238`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(H[t]\\)\\)\\\\ \\(\\(R[t]\\)\\)\\)\\)\\)\\)\\)\\), \\(\\(\\(\\(\\(\
\\(\\*SuperscriptBox[\\\"H\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, \
None]]\\)\\)[t]\\)\\) \[Equal] \\(\\(\\(\\(\\(\\(-0.3`\\)\\)\\\\ \
\\(\\(H[t]\\)\\)\\)\\) + \\(\\(0.7627700713964738`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(F[t]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\[LeftSkeleton] 2 \
\[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) - \\(\\(0.565685424949238`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(H[t]\\)\\)\\\\ \\(\\(R[t]\\)\\)\\)\\)\\)\\)\\)\\), \\(\\(\\(\\(\\(\
\\(\\*SuperscriptBox[\\\"R\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, \
None]]\\)\\)[t]\\)\\) \[Equal] \\(\\(\\(\\(\\(\\(-\\(\\((\\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\) + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\)\\\\ \
\\(\\(R[t]\\)\\)\\)\\) + \\(\\(0.5`\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\\\ \
\\(\\(R[t]\\)\\)\\)\\)\\)\\)\\)\\), \
\\(\\(\\(\\(\\(\\(\\*SuperscriptBox[\\\"xbar\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]]\\)\\)[t]\\)\\) \[Equal] \
\\(\\(\\(\\(-6.934273376331579`\\)\\)\\\\ \
\[ExponentialE]\\^\\(\\(\\(-45.454545454545446`\\)\\)\\\\ \\(\\(Power[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\)\\)\\\\ \\(\\((\\(\\(-1\\)\\) \
+ \\(\\(\\(\\(F[\\(\\(\[LeftSkeleton] 1 \[RightSkeleton]\\)\\)]\\)\\)\\\\ \\(\
\\(Power[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\)\\)\\))\\)\\)\\\
\\ \\(\\((1 - \\(\\(R[\\(\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\\\ \\(\\((\\(\\(-1\\)\\) + \
\\(\\(xbar[t]\\)\\))\\)\\)\\)\\)\\)\\), \
\\(\\(\\(\\(\\(\\(\\*SuperscriptBox[\\\"ybar\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]]\\)\\)[t]\\)\\) \[Equal] 0.1`\\)\\), \
\\(\\(\\(\\(F[0]\\)\\) \[Equal] 0.16`\\)\\), \\(\\(\\(\\(H[0]\\)\\) \[Equal] \
0.16`\\)\\), \\(\\(\\(\\(R[0]\\)\\) \[Equal] 0.16`\\)\\), \\(\\(\\(\\(xbar[0]\
\\)\\) \[Equal] 0.8`\\)\\), \\(\\(\\(\\(ybar[0]\\)\\) \[Equal] 0.2`\\)\\)}\\)\
\\), \\(\\(\[LeftSkeleton] 3 \[RightSkeleton]\\)\\), \\(\\(InterpolationOrder \
\[Rule] All\\)\\)\\)\\)]\\)}\\)\[NoBreak] is neither a list of replacement \
rules nor a valid dispatch table, and so cannot be used for replacing. \\!\\(\
\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", \
ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690181098*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(0.004085714285714286`\\)\[NoBreak] cannot \
be used as a variable. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", ButtonNote -> \
\\\"NDSolve::dsvar\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690256031*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\({\\(NDSolve[\\(\\(\\(\\({\\(\\(\\(\\(\\(\\(\\*\
SuperscriptBox[\\\"F\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, None]]\\)\
\\)[0.004085714285714286`]\\)\\) \[Equal] \\(\\(\\(\\(0.2`\\\\ \
\\(\\(F[0.004085714285714286`]\\)\\)\\)\\) - \\(\\(0.7627700713964738`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(F[0.004085714285714286`]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) + \
\\(\\(0.565685424949238`\\\\ \[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] \
2 \[RightSkeleton]\\)\\)]\\)\\\\ \\(\\(H[0.004085714285714286`]\\)\\)\\\\ \\(\
\\(R[0.004085714285714286`]\\)\\)\\)\\)\\)\\)\\)\\), \
\\(\\(\\(\\(\\(\\(\\*SuperscriptBox[\\\"H\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]]\\)\\)[0.004085714285714286`]\\)\\) \[Equal] \
\\(\\(\\(\\(\\(\\(-0.3`\\)\\)\\\\ \\(\\(H[0.004085714285714286`]\\)\\)\\)\\) \
+ \\(\\(0.7627700713964738`\\\\ \[ExponentialE]\\^\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\\\ \
\\(\\(F[0.004085714285714286`]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) - \
\\(\\(0.565685424949238`\\\\ \[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] \
2 \[RightSkeleton]\\)\\)]\\)\\\\ \\(\\(H[0.004085714285714286`]\\)\\)\\\\ \\(\
\\(R[0.004085714285714286`]\\)\\)\\)\\)\\)\\)\\)\\), \\(\\(\[LeftSkeleton] 6 \
\[RightSkeleton]\\)\\), \\(\\(\\(\\(xbar[0]\\)\\) \[Equal] 0.8`\\)\\), \\(\\(\
\\(\\(ybar[0]\\)\\) \[Equal] 0.2`\\)\\)}\\)\\), \\(\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)\\), \\(\\({\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)}\\)\\), \\(\\(MaxSteps \[Rule] \[Infinity]\\)\\), \
\\(\\(InterpolationOrder \[Rule] All\\)\\)\\)\\)]\\)}\\)\[NoBreak] is neither \
a list of replacement rules nor a valid dispatch table, and so cannot be used \
for replacing. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", ButtonNote -> \
\\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690261118*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(4.085718367346939`\\)\[NoBreak] cannot be \
used as a variable. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", ButtonNote -> \
\\\"NDSolve::dsvar\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.6755266902807207`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
  RowBox[{
  ":", " "}], \
"\<\"\[NoBreak]\\!\\({\\(NDSolve[\\(\\(\\(\\({\\(\\(\\(\\(\\(\\(\\*\
SuperscriptBox[\\\"F\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, None]]\\)\
\\)[4.085718367346939`]\\)\\) \[Equal] \\(\\(\\(\\(0.2`\\\\ \
\\(\\(F[4.085718367346939`]\\)\\)\\)\\) - \\(\\(0.7627700713964738`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(F[4.085718367346939`]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) + \
\\(\\(0.565685424949238`\\\\ \[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] \
2 \[RightSkeleton]\\)\\)]\\)\\\\ \\(\\(H[4.085718367346939`]\\)\\)\\\\ \
\\(\\(R[4.085718367346939`]\\)\\)\\)\\)\\)\\)\\)\\), \
\\(\\(\\(\\(\\(\\(\\*SuperscriptBox[\\\"H\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]]\\)\\)[4.085718367346939`]\\)\\) \[Equal] \
\\(\\(\\(\\(\\(\\(-0.3`\\)\\)\\\\ \\(\\(H[4.085718367346939`]\\)\\)\\)\\) + \
\\(\\(0.7627700713964738`\\\\ \
\[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\
\\\\ \\(\\(F[4.085718367346939`]\\)\\)\\\\ \\(\\((1 + \\(\\(Times[\\(\\(\
\[LeftSkeleton] 2 \[RightSkeleton]\\)\\)]\\)\\))\\)\\)\\)\\) - \
\\(\\(0.565685424949238`\\\\ \[ExponentialE]\\^\\(Times[\\(\\(\[LeftSkeleton] \
2 \[RightSkeleton]\\)\\)]\\)\\\\ \\(\\(H[4.085718367346939`]\\)\\)\\\\ \
\\(\\(R[4.085718367346939`]\\)\\)\\)\\)\\)\\)\\)\\), \\(\\(\[LeftSkeleton] 6 \
\[RightSkeleton]\\)\\), \\(\\(\\(\\(xbar[0]\\)\\) \[Equal] 0.8`\\)\\), \\(\\(\
\\(\\(ybar[0]\\)\\) \[Equal] 0.2`\\)\\)}\\)\\), \\(\\({F, H, R, xbar, \
ybar}\\)\\), \\(\\({\\(\\(\[LeftSkeleton] 18 \[RightSkeleton]\\)\\), 0, \
200}\\)\\), \\(\\(MaxSteps \[Rule] \[Infinity]\\)\\), \
\\(\\(InterpolationOrder \[Rule] All\\)\\)\\)\\)]\\)}\\)\[NoBreak] is neither \
a list of replacement rules nor a valid dispatch table, and so cannot be used \
for replacing. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", ButtonNote -> \
\\\"ReplaceAll::reps\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690305125*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[\\(ReplaceAll :: reps\\), \\\"MessageName\\\"]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690310815*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(8.167351020408162`\\)\[NoBreak] cannot be \
used as a variable. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", ButtonNote -> \
\\\"NDSolve::dsvar\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.675526690330511*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \[NoBreak]\\!\\(\\*StyleBox[\\(NDSolve \
:: dsvar\\), \\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this \
calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.675526340753974*^9, 3.6755264384487257`*^9, 
  3.6755265042647953`*^9, 3.6755266903558817`*^9}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
      GraphicsBox[{{}, {}, {}}, {
        ImageSize -> 400, DisplayFunction -> Identity, AspectRatio -> 0.25, 
         Axes -> {True, True}, AxesLabel -> {None, None}, 
         AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
         Frame -> {{True, True}, {True, True}}, FrameLabel -> {{
            FormBox["\"Density\"", TraditionalForm], None}, {
            FormBox["\"Time\"", TraditionalForm], None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], 
         Method -> {
          "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
         PlotRange -> {{0., 0.}, {0, All}}, PlotRangeClipping -> True, 
         PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {0, 
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
        FormBox[
         TemplateBox[{"\"R\"", "\"H\"", "\"F\""}, "SwatchLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2, ",", #3}], "}"}]}], "]"}]& ), Editable -> 
          True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]},
    {
     GraphicsBox[{},
      AspectRatio->0.25,
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{
         FormBox["\"Trait\"", TraditionalForm], None}, {
         FormBox["\"Time\"", TraditionalForm], None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->400,
      Method->{
       "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
      PlotRange->{{0., 0.}, {0, All}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {0, 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}]},
    {
     GraphicsBox[{{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1: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
BGV2YbZN3d1kzv8BZlbxNg==
         "]]}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{True, True}, {True, True}},
      FrameLabel->{{
         FormBox["\"Starvation Rate\"", TraditionalForm], None}, {
         FormBox["\"Xbar\"", TraditionalForm], None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      Method->{
       "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
      PlotRange->{{0., 2.99999993877551}, {0, 0.8}},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {0, 0}},
      Ticks->{Automatic, Automatic}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6755264386960287`*^9, 3.675526504686717*^9, 
  3.675526690461615*^9}]
}, Open  ]]
},
WindowSize->{1169, 851},
WindowMargins->{{4, Automatic}, {0, Automatic}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September 9, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 76, 1, 28, "Input"],
Cell[CellGroupData[{
Cell[659, 25, 4979, 120, 233, "Input"],
Cell[5641, 147, 67959, 1180, 238, "Output"]
}, Open  ]],
Cell[73615, 1330, 140, 2, 28, "Input"],
Cell[73758, 1334, 164, 2, 28, "Input"],
Cell[CellGroupData[{
Cell[73947, 1340, 17900, 436, 864, "Input"],
Cell[91850, 1778, 109166, 1859, 413, "Output"]
}, Open  ]],
Cell[201031, 3640, 94, 1, 28, "Input"],
Cell[CellGroupData[{
Cell[201150, 3645, 23047, 565, 1224, "Input"],
Cell[224200, 4212, 577, 11, 24, "Message"],
Cell[224780, 4225, 3391, 52, 109, "Message"],
Cell[228174, 4279, 538, 11, 24, "Message"],
Cell[228715, 4292, 2353, 37, 96, "Message"],
Cell[231071, 4331, 537, 11, 24, "Message"],
Cell[231611, 4344, 2325, 37, 96, "Message"],
Cell[233939, 4383, 606, 12, 24, "Message"],
Cell[234548, 4397, 535, 11, 24, "Message"],
Cell[235086, 4410, 606, 12, 24, "Message"],
Cell[235695, 4424, 38643, 697, 409, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
